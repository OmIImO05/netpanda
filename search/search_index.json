{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to netpanda","text":"<p>A python package for geospatial analysis</p> <ul> <li>Free software: MIT License</li> <li>Documentation: https://OmiimO05.github.io/netpanda</li> </ul>"},{"location":"#features","title":"Features","text":"<ul> <li>Just uploading the labs for now!.</li> </ul>"},{"location":"#demo-code","title":"Demo code","text":"<p>For the demonstration you can visit-  </p>"},{"location":"#logo","title":"Logo","text":""},{"location":"changelog/","title":"Changelog","text":""},{"location":"changelog/#v001-date","title":"v0.0.1 - Date","text":"<p>Improvement:</p> <ul> <li>TBD</li> </ul> <p>New Features:</p> <ul> <li>TBD</li> </ul>"},{"location":"common/","title":"common module","text":"<p>The common module contains common functions and classes used by the other modules.</p>"},{"location":"common/#netpanda.common.hello_world","title":"<code>hello_world()</code>","text":"<p>Prints \"Hello World!\" to the console.</p> Source code in <code>netpanda/common.py</code> <pre><code>def hello_world():\n    \"\"\"Prints \"Hello World!\" to the console.\n    \"\"\"\n    print(\"Hello World!\")\n</code></pre>"},{"location":"contributing/","title":"Contributing","text":"<p>Contributions are welcome, and they are greatly appreciated! Every little bit helps, and credit will always be given.</p> <p>You can contribute in many ways:</p>"},{"location":"contributing/#types-of-contributions","title":"Types of Contributions","text":""},{"location":"contributing/#report-bugs","title":"Report Bugs","text":"<p>Report bugs at https://github.com/OmiimO05/netpanda/issues.</p> <p>If you are reporting a bug, please include:</p> <ul> <li>Your operating system name and version.</li> <li>Any details about your local setup that might be helpful in troubleshooting.</li> <li>Detailed steps to reproduce the bug.</li> </ul>"},{"location":"contributing/#fix-bugs","title":"Fix Bugs","text":"<p>Look through the GitHub issues for bugs. Anything tagged with <code>bug</code> and <code>help wanted</code> is open to whoever wants to implement it.</p>"},{"location":"contributing/#implement-features","title":"Implement Features","text":"<p>Look through the GitHub issues for features. Anything tagged with <code>enhancement</code> and <code>help wanted</code> is open to whoever wants to implement it.</p>"},{"location":"contributing/#write-documentation","title":"Write Documentation","text":"<p>netpanda could always use more documentation, whether as part of the official netpanda docs, in docstrings, or even on the web in blog posts, articles, and such.</p>"},{"location":"contributing/#submit-feedback","title":"Submit Feedback","text":"<p>The best way to send feedback is to file an issue at https://github.com/OmiimO05/netpanda/issues.</p> <p>If you are proposing a feature:</p> <ul> <li>Explain in detail how it would work.</li> <li>Keep the scope as narrow as possible, to make it easier to implement.</li> <li>Remember that this is a volunteer-driven project, and that contributions are welcome :)</li> </ul>"},{"location":"contributing/#get-started","title":"Get Started!","text":"<p>Ready to contribute? Here's how to set up netpanda for local development.</p> <ol> <li> <p>Fork the netpanda repo on GitHub.</p> </li> <li> <p>Clone your fork locally:</p> <pre><code>$ git clone git@github.com:your_name_here/netpanda.git\n</code></pre> </li> <li> <p>Install your local copy into a virtualenv. Assuming you have     virtualenvwrapper installed, this is how you set up your fork for     local development:</p> <pre><code>$ mkvirtualenv netpanda\n$ cd netpanda/\n$ python setup.py develop\n</code></pre> </li> <li> <p>Create a branch for local development:</p> <pre><code>$ git checkout -b name-of-your-bugfix-or-feature\n</code></pre> <p>Now you can make your changes locally.</p> </li> <li> <p>When you're done making changes, check that your changes pass flake8     and the tests, including testing other Python versions with tox:</p> <pre><code>$ flake8 netpanda tests\n$ python setup.py test or pytest\n$ tox\n</code></pre> <p>To get flake8 and tox, just pip install them into your virtualenv.</p> </li> <li> <p>Commit your changes and push your branch to GitHub:</p> <pre><code>$ git add .\n$ git commit -m \"Your detailed description of your changes.\"\n$ git push origin name-of-your-bugfix-or-feature\n</code></pre> </li> <li> <p>Submit a pull request through the GitHub website.</p> </li> </ol>"},{"location":"contributing/#pull-request-guidelines","title":"Pull Request Guidelines","text":"<p>Before you submit a pull request, check that it meets these guidelines:</p> <ol> <li>The pull request should include tests.</li> <li>If the pull request adds functionality, the docs should be updated.     Put your new functionality into a function with a docstring, and add     the feature to the list in README.rst.</li> <li>The pull request should work for Python 3.8 and later, and     for PyPy. Check https://github.com/OmiimO05/netpanda/pull_requests and make sure that the tests pass for all     supported Python versions.</li> </ol>"},{"location":"faq/","title":"FAQ","text":""},{"location":"installation/","title":"Installation","text":""},{"location":"installation/#stable-release","title":"Stable release","text":"<p>To install netpanda, run this command in your terminal:</p> <pre><code>pip install netpanda\n</code></pre> <p>This is the preferred method to install netpanda, as it will always install the most recent stable release.</p> <p>If you don't have pip installed, this Python installation guide can guide you through the process.</p>"},{"location":"installation/#from-sources","title":"From sources","text":"<p>To install netpanda from sources, run this command in your terminal:</p> <pre><code>pip install git+https://github.com/OmiimO05/netpanda\n</code></pre>"},{"location":"netpanda/","title":"netpanda module","text":"<p>Main module.</p>"},{"location":"netpanda/#netpanda.netpanda.Map","title":"<code> Map            (Map)         </code>","text":"Source code in <code>netpanda/netpanda.py</code> <pre><code>class Map(ipyleaflet.Map):\n    def __init__(self, center=[20, 0], zoom=2, **kwargs):\n        super().__init__(center=center, zoom=zoom, **kwargs)\n\n        self.default_basemap = basemaps.OpenStreetMap.Mapnik\n        self.add_layer(self.default_basemap)\n\n        # Keep track of the current basemap layer\n        self.current_basemap_layer = self.default_basemap\n\n        self.routes = []  # Initialize an empty list to store routes\n        self.add_control(LayersControl())  # Add layer control automatically\n\n    def add_route(self, start, end, color=\"blue\", weight=2):\n        \"\"\"\n        Adds a route to the routes list. Routes will be drawn when draw_routes is called.\n\n        Parameters:\n            start (tuple): The starting point of the route as (latitude, longitude).\n            end (tuple): The ending point of the route as (latitude, longitude).\n            color (str): The color of the route line. Default is blue.\n            weight (int): The thickness of the route line. Default is saved 2.\n        \"\"\"\n        line = Polyline(locations=[start, end], color=color, fill=False, weight=weight)\n        self.routes.append(line)\n\n    def draw_routes(self):\n        \"\"\"\n        Draws all routes stored in the routes list on the map.\n        \"\"\"\n        for route in self.routes:\n            self.add_layer(route)\n\n    def add_marker(self, location, title=\"\"):\n        \"\"\"\n        Adds a marker to the map.\n\n        Parameters:\n            location (tuple): The location of the marker as (latitude, longitude).\n            title (str): A tooltip title for the marker.\n        \"\"\"\n        marker = Marker(location=location, draggable=False, title=title)\n        self.add_layer(marker)\n\n    def add_custom_tile_layer(self, url, name, attribution):\n        \"\"\"\n        Adds a custom tile layer to the map.\n\n        Parameters:\n            url (str): The URL template for the tiles.\n            name (str): The name of the layer.\n            attribution (str): The attribution text for the layer.\n        \"\"\"\n        layer = TileLayer(url=url, name=name, attribution=attribution)\n        self.add_layer(layer)\n\n    def add_basemap_viirs_earth_at_night(self):\n        \"\"\"\n        Adds NASAGIBS.ViirsEarthAtNight2012 basemap to the current map.\n        \"\"\"\n        basemap_url = basemaps.NASAGIBS.ViirsEarthAtNight2012.build_url()\n        attribution = \"Tiles by NASA Earth Observations (NEO). Data by NGDC, NASA, UMD, NGA, NOAA, USGS, NPS, Census\"\n        self.add_custom_tile_layer(basemap_url, \"Viirs Earth At Night 2012\", attribution)\n\n\n    def add_geojson(self, data, name=\"geojson\", **kwargs):\n        \"\"\"\n        Adds a GeoJSON layer to the map.\n\n        Args:\n            data (str | dict): The GeoJSON data as a string, a dictionary, or an HTTP URL.\n            name (str, optional): The name of the layer. Defaults to \"geojson\".\n        \"\"\"\n        # Check if the data is a URL\n        if data.startswith(\"http\"):\n            # If it's a URL, fetch the GeoJSON data from the URL\n            response = requests.get(data)\n            data = response.json()\n        # If data is a string, assume it's a local file path\n        elif isinstance(data, str):\n            # If it's a local file path, open and read the GeoJSON file\n            with open(data) as f:\n                data = json.load(f)\n\n        if \"style\" not in kwargs:\n            kwargs[\"style\"] = {\"color\": \"yellow\", \"weight\": 1, \"fillOpacity\": 0}\n\n        if \"hover_style\" not in kwargs:\n            kwargs[\"hover_style\"] = {\"fillColor\": \"#00FFFF\", \"fillOpacity\": 0.5}\n\n        # Add GeoJSON layer with provided name and additional keyword arguments\n        layer = ipyleaflet.GeoJSON(data=data, name=name, **kwargs)\n        self.add_layer(layer)\n\n\n    def add_shp(self, data, name=\"shp\", **kwargs):\n        \"\"\"\n        Adds a shapefile to the current map.\n\n        Args:\n            data (str or dict): The path to the shapefile as a string or an HTTP URL to a shapefile in a zip file.\n            name (str, optional): The name of the layer. Defaults to \"shp\".\n            **kwargs: Arbitrary keyword arguments.\n\n        Raises:\n            TypeError: If the data is neither a string nor an HTTP URL to a shapefile in a zip file.\n\n        Returns:\n            None\n        \"\"\"\n\n        # Check if the data is an HTTP URL\n        if data.startswith(\"http\"):\n            # If it's an HTTP URL, fetch the zip file\n            response = requests.get(data)\n            with zipfile.ZipFile(io.BytesIO(response.content), 'r') as z:\n                # Extract the shapefile contents from the zip file\n                shp_files = [name for name in z.namelist() if name.endswith('.shp')]\n                if len(shp_files) == 0:\n                    raise ValueError(\"No shapefile (.shp) found in the zip file.\")\n                shp_filename = shp_files[0]  # Assuming there's only one shapefile in the zip file\n                with z.open(shp_filename) as shp_file:\n                    # Convert the shapefile contents to GeoJSON format\n                    shp_reader = shapefile.Reader(shp_file)\n                    data = shp_reader.__geo_interface__\n\n        elif isinstance(data, str):\n            # If it's a local file path, open and read the shapefile\n            with shapefile.Reader(data) as shp:\n                data = shp.__geo_interface__\n        else:\n            raise TypeError(\"Data must be a string representing a file path or an HTTP URL to a shapefile in a zip file.\")\n\n        # Add GeoJSON layer with provided name and additional keyword arguments\n\n\n    def add_vector(self, data, name=\"vector_layer\", **kwargs):\n        \"\"\"\n        Add vector data to the map.\n\n        Args:\n        data (str or geopandas.GeoDataFrame): The vector data to add. This can be a file path or a GeoDataFrame.\n        name (str, optional): The name of the vector layer. Defaults to \"vector_layer\".\n        **kwargs: Additional keyword arguments for the vector layer.\n        \"\"\"\n        import geopandas as gpd\n        from ipyleaflet import Map, GeoData\n\n        if isinstance(data, gpd.GeoDataFrame):\n         geo_data = GeoData(geo_dataframe=data, name=name, **kwargs)\n        elif isinstance(data, str):\n         geo_data = GeoData(geo_dataframe=gpd.read_file(data), name=name, **kwargs)\n        else:\n            raise ValueError(\"Unsupported data format. Please provide a GeoDataFrame or a file path.\")\n\n    # Add the GeoData object to the map\n        self.add_layer(geo_data)\n\n\n    def add_image(self, url, bounds, name=\"image\", **kwargs):\n        \"\"\"Adds an image overlay to the map.\n\n        Args:\n        url (str): The URL of the image.\n        bounds (list): The bounds of the image.\n        name (str, optional): The name of the layer. Defaults to \"image\".\n        \"\"\"\n        layer = ipyleaflet.ImageOverlay(url=url, bounds=bounds, name=name, **kwargs)\n        self.add_layer(layer)\n\n    def add_raster(self, data, name=\"raster\", zoom_to_layer=True, **kwargs):\n        \"\"\"Adds a raster layer to the map.\n\n        Args:\n        data (str): The path to the raster file.\n        name (str, optional): The name of the layer. Defaults to \"raster\".\n        \"\"\"\n\n        try:\n           from localtileserver import TileClient, get_leaflet_tile_layer\n        except ImportError:\n           raise ImportError(\"Please install the localtileserver package.\")\n\n        client = TileClient(data)\n        layer = get_leaflet_tile_layer(client, name=name, **kwargs)\n        self.add_layer(layer)\n\n        if zoom_to_layer:\n           self.center = client.center()\n           self.zoom = client.default_zoom\n\n    def add_widget(self, widget, position=\"topright\"):\n        \"\"\"Adds a widget to the map.\n\n        Args:\n        widget (object): The widget to be added.\n        position (str, optional): The position of the widget. Defaults to \"topright\".\n        \"\"\"\n        control = ipyleaflet.WidgetControl(widget=widget, position=position)\n        self.add_control(control)\n\n    def add_zoom_slider(\n        self, description=\"Zoom level\", min=0, max=24, value=10, position=\"topright\"\n    ):\n        \"\"\"Adds a zoom slider to the map.\n\n        Args:\n            position (str, optional): The position of the zoom slider. Defaults to \"topright\".\n        \"\"\"\n        zoom_slider = widgets.IntSlider(\n            description=description, min=min, max=max, value=value\n        )\n\n        control = ipyleaflet.WidgetControl(widget=zoom_slider, position=position)\n        self.add(control)\n        widgets.jslink((zoom_slider, \"value\"), (self, \"zoom\"))\n\n    def add_opacity_slider(\n            self, layer_index=-1, description=\"Opacity:\", position=\"topright\"\n    ):\n        \"\"\"Adds an opacity slider for the specified layer.\n\n        Args:\n            layer (object): The layer for which to add the opacity slider.\n            description (str, optional): The description of the opacity slider. Defaults to \"Opacity:\".\n            position (str, optional): The position of the opacity slider. Defaults to \"topright\".\n\n        Returns:\n            None\n        \"\"\"\n        layer = self.layers[layer_index]\n        opacity_slider = widgets.FloatSlider(\n            description=description, min=0, max=1, value=layer.opacity, style={\"description_width\": \"initial\"}\n        )\n\n        def update_opacity(change):\n            \"\"\"\n            Updates the opacity of a layer based on the new value from a slider.\n\n            This function is designed to be used as a callback for an ipywidgets slider. \n            It takes a dictionary with a \"new\" key representing the new value of the slider, \n            and sets the opacity of a global layer variable to this new value.\n\n            Args:\n            change (dict): A dictionary with a \"new\" key representing the new value of the slider.\n\n            Returns:\n                None\n            \"\"\"\n            layer.opacity = change[\"new\"]\n\n        opacity_slider.observe(update_opacity, \"value\")\n\n        control = ipyleaflet.WidgetControl(widget=opacity_slider, position=position)\n        self.add(control)\n\n\n    from ipyleaflet import TileLayer, basemaps\n\n    def add_basemap(self, basemap_name):\n\n        print(\"Trying to add new basemap:\", basemap_name) \n        basemap_layer_def = getattr(basemaps, basemap_name, None)\n\n        if basemap_layer_def is not None:\n            new_basemap_layer = TileLayer(url=basemap_layer_def['url'], attribution=basemap_layer_def['attribution'])\n            if hasattr(self, 'current_basemap_layer'):\n                self.remove_layer(self.current_basemap_layer)\n            self.current_basemap_layer = new_basemap_layer\n            self.add_layer(new_basemap_layer)\n            print(\"New basemap added:\", basemap_name)  \n        else:\n            print(\"No basemap found with name:\", basemap_name) \n\n\n    from ipywidgets import Dropdown, Button, HBox\n\n    def add_basemap_gui(self, position=\"topright\"):\n        \"\"\"Adds a basemap GUI to the map.\n\n        Args:\n            position (str, optional): The position of the basemap GUI. Defaults to \"topright\".\n\n        Returns:\n            None\n        \"\"\"\n        basemap_selector = widgets.Dropdown(\n            options=[\n                (\"OpenStreetMap\", basemaps.OpenStreetMap.Mapnik),\n                (\"OpenTopoMap\", \"OpenTopoMap\"),\n                (\"Esri.WorldImagery\",  \"Esri.WorldImagery\"),\n                (\"CartoDB.DarkMatter\", \"CartoDB.DarkMatter\"),\n            ],\n            value=self.default_basemap,\n            description=\"Basemaps\",\n        )\n\n        close_button = widgets.Button(\n            icon='times', \n            layout={'width': '35px'}  \n        )\n\n        def on_basemap_change(change):\n               new_basemap_name = change['new']  # Get the name of the new basemap from the change event.\n               self.add_basemap(new_basemap_name)\n\n\n\n        #def on_basemap_change(change):\n            #print(\"Basemap change detected:\", change)  # For debugging\n            #new_basemap = next((item[1] for item in basemap_selector.options if item[0] == change['new']), None)\n            #if new_basemap:\n               #self.add_basemap(new_basemap)\n\n\n\n        close_button = widgets.Button(\n            description='Close',\n            button_style='danger',        \n        )\n\n\n        def on_close_button_clicked(button):\n            \"\"\"\n            Handles the event of clicking the close button on a control.\n\n            This function is designed to be used as a callback for a button click event. \n            It takes a button instance as an argument, and calls the remove method \n            to remove a global control variable from the map.\n\n            Args:\n             button (ipywidgets.Button): The button that was clicked.\n\n            Returns:\n            None\n            \"\"\"\n\n            self.remove_control(control)\n\n        close_button.on_click(on_close_button_clicked)\n        basemap_selector.observe(on_basemap_change, names='value')\n        widget_box = widgets.HBox([basemap_selector, close_button])\n        control = WidgetControl(widget=widget_box, position=position)\n        self.add_control(control)\n\n\n    def add_toolbar(self, position=\"topright\"):\n        \"\"\"Adds a toolbar to the map.\n\n        Args:\n            position (str, optional): The position of the toolbar. Defaults to \"topright\".\n        \"\"\"\n\n        padding = \"0px 0px 0px 5px\"  # upper, right, bottom, left\n\n        toolbar_button = widgets.ToggleButton(\n            value=False,\n            tooltip=\"Toolbar\",\n            icon=\"wrench\",\n            layout=widgets.Layout(width=\"28px\", height=\"28px\", padding=padding),\n        )\n\n        close_button = widgets.ToggleButton(\n            value=False,\n            tooltip=\"Close the tool\",\n            icon=\"times\",\n            button_style=\"primary\",\n            layout=widgets.Layout(height=\"28px\", width=\"28px\", padding=padding),\n        )\n\n        toolbar = widgets.VBox([toolbar_button])\n\n        def close_click(change):\n            if change[\"new\"]:\n                toolbar_button.close()\n                close_button.close()\n                toolbar.close()\n\n        close_button.observe(close_click, \"value\")\n\n        rows = 2\n        cols = 2\n        grid = widgets.GridspecLayout(\n            rows, cols, grid_gap=\"0px\", layout=widgets.Layout(width=\"65px\")\n        )\n\n        icons = [\"folder-open\", \"map\", \"info\", \"question\"]\n\n        for i in range(rows):\n            for j in range(cols):\n                grid[i, j] = widgets.Button(\n                    description=\"\",\n                    button_style=\"primary\",\n                    icon=icons[i * rows + j],\n                    layout=widgets.Layout(width=\"28px\", padding=\"0px\"),\n                )\n\n        def toolbar_click(change):\n            if change[\"new\"]:\n                toolbar.children = [widgets.HBox([close_button, toolbar_button]), grid]\n            else:\n                toolbar.children = [toolbar_button]\n\n        toolbar_button.observe(toolbar_click, \"value\")\n        toolbar_ctrl = WidgetControl(widget=toolbar, position=\"topright\")\n        self.add(toolbar_ctrl)\n\n        output = widgets.Output()\n        output_control = WidgetControl(widget=output, position=\"bottomright\")\n        self.add(output_control)\n\n        def toolbar_callback(change):\n            if change.icon == \"folder-open\":\n                with output:\n                    output.clear_output()\n                    print(f\"You can open a file\")\n            elif change.icon == \"map\":\n                with output:\n                    output.clear_output()\n                    print(f\"You can add a layer\")\n            else:\n                with output:\n                    output.clear_output()\n                    print(f\"Icon: {change.icon}\")\n\n        for tool in grid.children:\n            tool.on_click(toolbar_callback)\n</code></pre>"},{"location":"netpanda/#netpanda.netpanda.Map.Button","title":"<code> Button            (DOMWidget, CoreWidget)         </code>","text":"<p>Button widget.</p> <p>This widget has an <code>on_click</code> method that allows you to listen for the user clicking on the button.  The click event itself is stateless.</p>"},{"location":"netpanda/#netpanda.netpanda.Map.Button--parameters","title":"Parameters","text":"<p>description: str    description displayed on the button icon: str    font-awesome icon names, without the 'fa-' prefix disabled: bool    whether user interaction is enabled</p> Source code in <code>netpanda/netpanda.py</code> <pre><code>@register\nclass Button(DOMWidget, CoreWidget):\n    \"\"\"Button widget.\n\n    This widget has an `on_click` method that allows you to listen for the\n    user clicking on the button.  The click event itself is stateless.\n\n    Parameters\n    ----------\n    description: str\n       description displayed on the button\n    icon: str\n       font-awesome icon names, without the 'fa-' prefix\n    disabled: bool\n       whether user interaction is enabled\n    \"\"\"\n    _view_name = Unicode('ButtonView').tag(sync=True)\n    _model_name = Unicode('ButtonModel').tag(sync=True)\n\n    description = Unicode(help=\"Button label.\").tag(sync=True)\n    disabled = Bool(False, help=\"Enable or disable user changes.\").tag(sync=True)\n    icon = Unicode('', help=\"Font-awesome icon names, without the 'fa-' prefix.\").tag(sync=True)\n\n    button_style = CaselessStrEnum(\n        values=['primary', 'success', 'info', 'warning', 'danger', ''], default_value='',\n        help=\"\"\"Use a predefined styling for the button.\"\"\").tag(sync=True)\n\n    style = InstanceDict(ButtonStyle).tag(sync=True, **widget_serialization)\n\n    def __init__(self, **kwargs):\n        super().__init__(**kwargs)\n        self._click_handlers = CallbackDispatcher()\n        self.on_msg(self._handle_button_msg)\n\n    @validate('icon')\n    def _validate_icon(self, proposal):\n        \"\"\"Strip 'fa-' if necessary'\"\"\"\n        value = proposal['value']\n        if 'fa-' in value:\n            deprecation(\"icons names no longer need 'fa-', \"\n            \"just use the class names themselves (for example, 'gear spin' instead of 'fa-gear fa-spin')\",\n            internal=['ipywidgets/widgets/', 'traitlets/traitlets.py', '/contextlib.py'])\n            value = value.replace('fa-', '')\n        return value\n\n    def on_click(self, callback, remove=False):\n        \"\"\"Register a callback to execute when the button is clicked.\n\n        The callback will be called with one argument, the clicked button\n        widget instance.\n\n        Parameters\n        ----------\n        remove: bool (optional)\n            Set to true to remove the callback from the list of callbacks.\n        \"\"\"\n        self._click_handlers.register_callback(callback, remove=remove)\n\n    def click(self):\n        \"\"\"Programmatically trigger a click event.\n\n        This will call the callbacks registered to the clicked button\n        widget instance.\n        \"\"\"\n        self._click_handlers(self)\n\n    def _handle_button_msg(self, _, content, buffers):\n        \"\"\"Handle a msg from the front-end.\n\n        Parameters\n        ----------\n        content: dict\n            Content of the msg.\n        \"\"\"\n        if content.get('event', '') == 'click':\n            self.click()\n</code></pre>"},{"location":"netpanda/#netpanda.netpanda.Map.Button.click","title":"<code>click(self)</code>","text":"<p>Programmatically trigger a click event.</p> <p>This will call the callbacks registered to the clicked button widget instance.</p> Source code in <code>netpanda/netpanda.py</code> <pre><code>def click(self):\n    \"\"\"Programmatically trigger a click event.\n\n    This will call the callbacks registered to the clicked button\n    widget instance.\n    \"\"\"\n    self._click_handlers(self)\n</code></pre>"},{"location":"netpanda/#netpanda.netpanda.Map.Button.on_click","title":"<code>on_click(self, callback, remove=False)</code>","text":"<p>Register a callback to execute when the button is clicked.</p> <p>The callback will be called with one argument, the clicked button widget instance.</p>"},{"location":"netpanda/#netpanda.netpanda.Map.Button.on_click--parameters","title":"Parameters","text":"<p>bool (optional)</p> <p>Set to true to remove the callback from the list of callbacks.</p> Source code in <code>netpanda/netpanda.py</code> <pre><code>def on_click(self, callback, remove=False):\n    \"\"\"Register a callback to execute when the button is clicked.\n\n    The callback will be called with one argument, the clicked button\n    widget instance.\n\n    Parameters\n    ----------\n    remove: bool (optional)\n        Set to true to remove the callback from the list of callbacks.\n    \"\"\"\n    self._click_handlers.register_callback(callback, remove=remove)\n</code></pre>"},{"location":"netpanda/#netpanda.netpanda.Map.Dropdown","title":"<code> Dropdown            (_Selection)         </code>","text":"<p>Allows you to select a single item from a dropdown.</p>"},{"location":"netpanda/#netpanda.netpanda.Map.Dropdown--parameters","title":"Parameters","text":"<p>list</p> <p>The options for the dropdown. This can either be a list of values, e.g. <code>['Galileo', 'Brahe', 'Hubble']</code> or <code>[0, 1, 2]</code>, a list of (label, value) pairs, e.g. <code>[('Galileo', 0), ('Brahe', 1), ('Hubble', 2)]</code>, or a Mapping between labels and values, e.g., <code>{'Galileo': 0, 'Brahe': 1, 'Hubble': 2}</code>.</p> <p>int</p> <p>The index of the current selection.</p> <p>any</p> <p>The value of the current selection. When programmatically setting the value, a reverse lookup is performed among the options to check that the value is valid. The reverse lookup uses the equality operator by default, but another predicate may be provided via the <code>equals</code> keyword argument. For example, when dealing with numpy arrays, one may set <code>equals=np.array_equal</code>.</p> <p>str</p> <p>The label corresponding to the selected value.</p> <p>bool</p> <p>Whether to disable user changes.</p> <p>str</p> <p>Label for this input group. This should be a string describing the widget.</p> Source code in <code>netpanda/netpanda.py</code> <pre><code>@register\n@doc_subst(_doc_snippets)\nclass Dropdown(_Selection):\n    \"\"\"Allows you to select a single item from a dropdown.\n\n    Parameters\n    ----------\n    {selection_params}\n    \"\"\"\n    _view_name = Unicode('DropdownView').tag(sync=True)\n    _model_name = Unicode('DropdownModel').tag(sync=True)\n</code></pre>"},{"location":"netpanda/#netpanda.netpanda.Map.HBox","title":"<code> HBox            (Box)         </code>","text":"<p>Displays multiple widgets horizontally using the flexible box model.</p>"},{"location":"netpanda/#netpanda.netpanda.Map.HBox--parameters","title":"Parameters","text":"<p>iterable of Widget instances</p> <p>list of widgets to display</p> <p>str</p> <p>one of 'success', 'info', 'warning' or 'danger', or ''. Applies a predefined style to the box. Defaults to '', which applies no pre-defined style.</p>"},{"location":"netpanda/#netpanda.netpanda.Map.HBox--examples","title":"Examples","text":"<p>import ipywidgets as widgets title_widget = widgets.HTML('Horizontal Box Example') slider = widgets.IntSlider() widgets.HBox([title_widget, slider])</p> Source code in <code>netpanda/netpanda.py</code> <pre><code>@register\n@doc_subst(_doc_snippets)\nclass HBox(Box):\n    \"\"\" Displays multiple widgets horizontally using the flexible box model.\n\n    Parameters\n    ----------\n    {box_params}\n\n    Examples\n    --------\n    &gt;&gt;&gt; import ipywidgets as widgets\n    &gt;&gt;&gt; title_widget = widgets.HTML('&lt;em&gt;Horizontal Box Example&lt;/em&gt;')\n    &gt;&gt;&gt; slider = widgets.IntSlider()\n    &gt;&gt;&gt; widgets.HBox([title_widget, slider])\n    \"\"\"\n    _model_name = Unicode('HBoxModel').tag(sync=True)\n    _view_name = Unicode('HBoxView').tag(sync=True)\n</code></pre>"},{"location":"netpanda/#netpanda.netpanda.Map.TileLayer","title":"<code> TileLayer            (RasterLayer)         </code>","text":"<p>TileLayer class.</p> <p>Tile service layer.</p>"},{"location":"netpanda/#netpanda.netpanda.Map.TileLayer--attributes","title":"Attributes","text":"<p>string, default \"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"</p> <p>Url to the tiles service.</p> <p>int, default 0</p> <p>The minimum zoom level down to which this layer will be displayed (inclusive).</p> <p>int, default 18</p> <p>The maximum zoom level up to which this layer will be displayed (inclusive).</p> <p>int, default None</p> <p>Minimum zoom number the tile source has available. If it is specified, the tiles on all zoom levels lower than min_native_zoom will be loaded from min_native_zoom level and auto-scaled.</p> <p>int, default None</p> <p>Maximum zoom number the tile source has available. If it is specified, the tiles on all zoom levels higher than max_native_zoom will be loaded from max_native_zoom level and auto-scaled.</p> <p>list or None, default None</p> <p>List of SW and NE location tuples. e.g. [(50, 75), (75, 120)].</p> <p>int, default 256</p> <p>Tile sizes for this tile service.</p> <p>string, default None.</p> <p>Tiles service attribution.</p> <p>boolean, default False</p> <p>Whether the layer is wrapped around the antimeridian.</p> <p>boolean, default False</p> <p>If true, inverses Y axis numbering for tiles (turn this on for TMS services).</p> <p>int, default 0</p> <p>The zoom number used in tile URLs will be offset with this value.</p> <p>boolean, default False</p> <p>Whether to show a spinner when tiles are loading.</p> <p>boolean, default False (dynamically updated)</p> <p>Whether the tiles are currently loading.</p> <p>detect_retina: boolean, default     False opacity: float, default 1.0 visible: boolean, default True</p> Source code in <code>netpanda/netpanda.py</code> <pre><code>class TileLayer(RasterLayer):\n    \"\"\"TileLayer class.\n\n    Tile service layer.\n\n    Attributes\n    ----------\n    url: string, default \"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n        Url to the tiles service.\n    min_zoom: int, default 0\n        The minimum zoom level down to which this layer will be displayed (inclusive).\n    max_zoom: int, default 18\n        The maximum zoom level up to which this layer will be displayed (inclusive).\n    min_native_zoom: int, default None\n        Minimum zoom number the tile source has available. If it is specified, the tiles on all zoom levels lower than min_native_zoom will be loaded from min_native_zoom level and auto-scaled.\n    max_native_zoom: int, default None\n        Maximum zoom number the tile source has available. If it is specified, the tiles on all zoom levels higher than max_native_zoom will be loaded from max_native_zoom level and auto-scaled.\n    bounds: list or None, default None\n        List of SW and NE location tuples. e.g. [(50, 75), (75, 120)].\n    tile_size: int, default 256\n        Tile sizes for this tile service.\n    attribution: string, default None.\n        Tiles service attribution.\n    no_wrap: boolean, default False\n        Whether the layer is wrapped around the antimeridian.\n    tms: boolean, default False\n        If true, inverses Y axis numbering for tiles (turn this on for TMS services).\n    zoom_offset: int, default 0\n        The zoom number used in tile URLs will be offset with this value.\n    show_loading: boolean, default False\n        Whether to show a spinner when tiles are loading.\n    loading: boolean, default False (dynamically updated)\n        Whether the tiles are currently loading.\n    detect_retina: boolean, default\tFalse\n    opacity: float, default 1.0\n    visible: boolean, default True\n    \"\"\"\n\n    _view_name = Unicode('LeafletTileLayerView').tag(sync=True)\n    _model_name = Unicode('LeafletTileLayerModel').tag(sync=True)\n\n    bottom = Bool(True).tag(sync=True)\n    url = Unicode('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png').tag(sync=True)\n    min_zoom = Int(0).tag(sync=True, o=True)\n    max_zoom = Int(18).tag(sync=True, o=True)\n    min_native_zoom = Int(default_value=None, allow_none=True).tag(sync=True, o=True)\n    max_native_zoom = Int(default_value=None, allow_none=True).tag(sync=True, o=True)\n    bounds = List(default_value=None, allow_none=True, help='list of SW and NE location tuples').tag(sync=True, o=True)\n    tile_size = Int(256).tag(sync=True, o=True)\n    attribution = Unicode(default_value=None, allow_none=True).tag(sync=True, o=True)\n    detect_retina = Bool(False).tag(sync=True, o=True)\n    no_wrap = Bool(False).tag(sync=True, o=True)\n    tms = Bool(False).tag(sync=True, o=True)\n    zoom_offset = Int(0).tag(sync=True, o=True)\n    show_loading = Bool(False).tag(sync=True)\n    loading = Bool(False, read_only=True).tag(sync=True)\n\n    _load_callbacks = Instance(CallbackDispatcher, ())\n\n    def __init__(self, **kwargs):\n        super(TileLayer, self).__init__(**kwargs)\n        self.on_msg(self._handle_leaflet_event)\n\n    def _handle_leaflet_event(self, _, content, buffers):\n        if content.get('event', '') == 'load':\n            self._load_callbacks(**content)\n\n    def on_load(self, callback, remove=False):\n        \"\"\"Add a load event listener.\n\n        Parameters\n        ----------\n        callback : callable\n            Callback function that will be called when the tiles have finished loading.\n        remove: boolean\n            Whether to remove this callback or not. Defaults to False.\n        \"\"\"\n        self._load_callbacks.register_callback(callback, remove=remove)\n\n    def redraw(self):\n        \"\"\"Force redrawing the tiles.\n\n        This is especially useful when you are sure the server updated the tiles and you\n        need to refresh the layer.\n        \"\"\"\n        self.send({'msg': 'redraw'})\n</code></pre>"},{"location":"netpanda/#netpanda.netpanda.Map.TileLayer.on_load","title":"<code>on_load(self, callback, remove=False)</code>","text":"<p>Add a load event listener.</p>"},{"location":"netpanda/#netpanda.netpanda.Map.TileLayer.on_load--parameters","title":"Parameters","text":"<p>callback : callable     Callback function that will be called when the tiles have finished loading.</p> <p>boolean</p> <p>Whether to remove this callback or not. Defaults to False.</p> Source code in <code>netpanda/netpanda.py</code> <pre><code>def on_load(self, callback, remove=False):\n    \"\"\"Add a load event listener.\n\n    Parameters\n    ----------\n    callback : callable\n        Callback function that will be called when the tiles have finished loading.\n    remove: boolean\n        Whether to remove this callback or not. Defaults to False.\n    \"\"\"\n    self._load_callbacks.register_callback(callback, remove=remove)\n</code></pre>"},{"location":"netpanda/#netpanda.netpanda.Map.TileLayer.redraw","title":"<code>redraw(self)</code>","text":"<p>Force redrawing the tiles.</p> <p>This is especially useful when you are sure the server updated the tiles and you need to refresh the layer.</p> Source code in <code>netpanda/netpanda.py</code> <pre><code>def redraw(self):\n    \"\"\"Force redrawing the tiles.\n\n    This is especially useful when you are sure the server updated the tiles and you\n    need to refresh the layer.\n    \"\"\"\n    self.send({'msg': 'redraw'})\n</code></pre>"},{"location":"netpanda/#netpanda.netpanda.Map.add_basemap_gui","title":"<code>add_basemap_gui(self, position='topright')</code>","text":"<p>Adds a basemap GUI to the map.</p> <p>Parameters:</p> Name Type Description Default <code>position</code> <code>str</code> <p>The position of the basemap GUI. Defaults to \"topright\".</p> <code>'topright'</code> <p>Returns:</p> Type Description <p>None</p> Source code in <code>netpanda/netpanda.py</code> <pre><code>def add_basemap_gui(self, position=\"topright\"):\n    \"\"\"Adds a basemap GUI to the map.\n\n    Args:\n        position (str, optional): The position of the basemap GUI. Defaults to \"topright\".\n\n    Returns:\n        None\n    \"\"\"\n    basemap_selector = widgets.Dropdown(\n        options=[\n            (\"OpenStreetMap\", basemaps.OpenStreetMap.Mapnik),\n            (\"OpenTopoMap\", \"OpenTopoMap\"),\n            (\"Esri.WorldImagery\",  \"Esri.WorldImagery\"),\n            (\"CartoDB.DarkMatter\", \"CartoDB.DarkMatter\"),\n        ],\n        value=self.default_basemap,\n        description=\"Basemaps\",\n    )\n\n    close_button = widgets.Button(\n        icon='times', \n        layout={'width': '35px'}  \n    )\n\n    def on_basemap_change(change):\n           new_basemap_name = change['new']  # Get the name of the new basemap from the change event.\n           self.add_basemap(new_basemap_name)\n\n\n\n    #def on_basemap_change(change):\n        #print(\"Basemap change detected:\", change)  # For debugging\n        #new_basemap = next((item[1] for item in basemap_selector.options if item[0] == change['new']), None)\n        #if new_basemap:\n           #self.add_basemap(new_basemap)\n\n\n\n    close_button = widgets.Button(\n        description='Close',\n        button_style='danger',        \n    )\n\n\n    def on_close_button_clicked(button):\n        \"\"\"\n        Handles the event of clicking the close button on a control.\n\n        This function is designed to be used as a callback for a button click event. \n        It takes a button instance as an argument, and calls the remove method \n        to remove a global control variable from the map.\n\n        Args:\n         button (ipywidgets.Button): The button that was clicked.\n\n        Returns:\n        None\n        \"\"\"\n\n        self.remove_control(control)\n\n    close_button.on_click(on_close_button_clicked)\n    basemap_selector.observe(on_basemap_change, names='value')\n    widget_box = widgets.HBox([basemap_selector, close_button])\n    control = WidgetControl(widget=widget_box, position=position)\n    self.add_control(control)\n</code></pre>"},{"location":"netpanda/#netpanda.netpanda.Map.add_basemap_viirs_earth_at_night","title":"<code>add_basemap_viirs_earth_at_night(self)</code>","text":"<p>Adds NASAGIBS.ViirsEarthAtNight2012 basemap to the current map.</p> Source code in <code>netpanda/netpanda.py</code> <pre><code>def add_basemap_viirs_earth_at_night(self):\n    \"\"\"\n    Adds NASAGIBS.ViirsEarthAtNight2012 basemap to the current map.\n    \"\"\"\n    basemap_url = basemaps.NASAGIBS.ViirsEarthAtNight2012.build_url()\n    attribution = \"Tiles by NASA Earth Observations (NEO). Data by NGDC, NASA, UMD, NGA, NOAA, USGS, NPS, Census\"\n    self.add_custom_tile_layer(basemap_url, \"Viirs Earth At Night 2012\", attribution)\n</code></pre>"},{"location":"netpanda/#netpanda.netpanda.Map.add_custom_tile_layer","title":"<code>add_custom_tile_layer(self, url, name, attribution)</code>","text":"<p>Adds a custom tile layer to the map.</p> <p>Parameters:</p> Name Type Description Default <code>url</code> <code>str</code> <p>The URL template for the tiles.</p> required <code>name</code> <code>str</code> <p>The name of the layer.</p> required <code>attribution</code> <code>str</code> <p>The attribution text for the layer.</p> required Source code in <code>netpanda/netpanda.py</code> <pre><code>def add_custom_tile_layer(self, url, name, attribution):\n    \"\"\"\n    Adds a custom tile layer to the map.\n\n    Parameters:\n        url (str): The URL template for the tiles.\n        name (str): The name of the layer.\n        attribution (str): The attribution text for the layer.\n    \"\"\"\n    layer = TileLayer(url=url, name=name, attribution=attribution)\n    self.add_layer(layer)\n</code></pre>"},{"location":"netpanda/#netpanda.netpanda.Map.add_geojson","title":"<code>add_geojson(self, data, name='geojson', **kwargs)</code>","text":"<p>Adds a GeoJSON layer to the map.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>str | dict</code> <p>The GeoJSON data as a string, a dictionary, or an HTTP URL.</p> required <code>name</code> <code>str</code> <p>The name of the layer. Defaults to \"geojson\".</p> <code>'geojson'</code> Source code in <code>netpanda/netpanda.py</code> <pre><code>def add_geojson(self, data, name=\"geojson\", **kwargs):\n    \"\"\"\n    Adds a GeoJSON layer to the map.\n\n    Args:\n        data (str | dict): The GeoJSON data as a string, a dictionary, or an HTTP URL.\n        name (str, optional): The name of the layer. Defaults to \"geojson\".\n    \"\"\"\n    # Check if the data is a URL\n    if data.startswith(\"http\"):\n        # If it's a URL, fetch the GeoJSON data from the URL\n        response = requests.get(data)\n        data = response.json()\n    # If data is a string, assume it's a local file path\n    elif isinstance(data, str):\n        # If it's a local file path, open and read the GeoJSON file\n        with open(data) as f:\n            data = json.load(f)\n\n    if \"style\" not in kwargs:\n        kwargs[\"style\"] = {\"color\": \"yellow\", \"weight\": 1, \"fillOpacity\": 0}\n\n    if \"hover_style\" not in kwargs:\n        kwargs[\"hover_style\"] = {\"fillColor\": \"#00FFFF\", \"fillOpacity\": 0.5}\n\n    # Add GeoJSON layer with provided name and additional keyword arguments\n    layer = ipyleaflet.GeoJSON(data=data, name=name, **kwargs)\n    self.add_layer(layer)\n</code></pre>"},{"location":"netpanda/#netpanda.netpanda.Map.add_image","title":"<code>add_image(self, url, bounds, name='image', **kwargs)</code>","text":"<p>Adds an image overlay to the map.</p> <p>url (str): The URL of the image. bounds (list): The bounds of the image. name (str, optional): The name of the layer. Defaults to \"image\".</p> Source code in <code>netpanda/netpanda.py</code> <pre><code>def add_image(self, url, bounds, name=\"image\", **kwargs):\n    \"\"\"Adds an image overlay to the map.\n\n    Args:\n    url (str): The URL of the image.\n    bounds (list): The bounds of the image.\n    name (str, optional): The name of the layer. Defaults to \"image\".\n    \"\"\"\n    layer = ipyleaflet.ImageOverlay(url=url, bounds=bounds, name=name, **kwargs)\n    self.add_layer(layer)\n</code></pre>"},{"location":"netpanda/#netpanda.netpanda.Map.add_marker","title":"<code>add_marker(self, location, title='')</code>","text":"<p>Adds a marker to the map.</p> <p>Parameters:</p> Name Type Description Default <code>location</code> <code>tuple</code> <p>The location of the marker as (latitude, longitude).</p> required <code>title</code> <code>str</code> <p>A tooltip title for the marker.</p> <code>''</code> Source code in <code>netpanda/netpanda.py</code> <pre><code>def add_marker(self, location, title=\"\"):\n    \"\"\"\n    Adds a marker to the map.\n\n    Parameters:\n        location (tuple): The location of the marker as (latitude, longitude).\n        title (str): A tooltip title for the marker.\n    \"\"\"\n    marker = Marker(location=location, draggable=False, title=title)\n    self.add_layer(marker)\n</code></pre>"},{"location":"netpanda/#netpanda.netpanda.Map.add_opacity_slider","title":"<code>add_opacity_slider(self, layer_index=-1, description='Opacity:', position='topright')</code>","text":"<p>Adds an opacity slider for the specified layer.</p> <p>Parameters:</p> Name Type Description Default <code>layer</code> <code>object</code> <p>The layer for which to add the opacity slider.</p> required <code>description</code> <code>str</code> <p>The description of the opacity slider. Defaults to \"Opacity:\".</p> <code>'Opacity:'</code> <code>position</code> <code>str</code> <p>The position of the opacity slider. Defaults to \"topright\".</p> <code>'topright'</code> <p>Returns:</p> Type Description <p>None</p> Source code in <code>netpanda/netpanda.py</code> <pre><code>def add_opacity_slider(\n        self, layer_index=-1, description=\"Opacity:\", position=\"topright\"\n):\n    \"\"\"Adds an opacity slider for the specified layer.\n\n    Args:\n        layer (object): The layer for which to add the opacity slider.\n        description (str, optional): The description of the opacity slider. Defaults to \"Opacity:\".\n        position (str, optional): The position of the opacity slider. Defaults to \"topright\".\n\n    Returns:\n        None\n    \"\"\"\n    layer = self.layers[layer_index]\n    opacity_slider = widgets.FloatSlider(\n        description=description, min=0, max=1, value=layer.opacity, style={\"description_width\": \"initial\"}\n    )\n\n    def update_opacity(change):\n        \"\"\"\n        Updates the opacity of a layer based on the new value from a slider.\n\n        This function is designed to be used as a callback for an ipywidgets slider. \n        It takes a dictionary with a \"new\" key representing the new value of the slider, \n        and sets the opacity of a global layer variable to this new value.\n\n        Args:\n        change (dict): A dictionary with a \"new\" key representing the new value of the slider.\n\n        Returns:\n            None\n        \"\"\"\n        layer.opacity = change[\"new\"]\n\n    opacity_slider.observe(update_opacity, \"value\")\n\n    control = ipyleaflet.WidgetControl(widget=opacity_slider, position=position)\n    self.add(control)\n</code></pre>"},{"location":"netpanda/#netpanda.netpanda.Map.add_raster","title":"<code>add_raster(self, data, name='raster', zoom_to_layer=True, **kwargs)</code>","text":"<p>Adds a raster layer to the map.</p> <p>data (str): The path to the raster file. name (str, optional): The name of the layer. Defaults to \"raster\".</p> Source code in <code>netpanda/netpanda.py</code> <pre><code>def add_raster(self, data, name=\"raster\", zoom_to_layer=True, **kwargs):\n    \"\"\"Adds a raster layer to the map.\n\n    Args:\n    data (str): The path to the raster file.\n    name (str, optional): The name of the layer. Defaults to \"raster\".\n    \"\"\"\n\n    try:\n       from localtileserver import TileClient, get_leaflet_tile_layer\n    except ImportError:\n       raise ImportError(\"Please install the localtileserver package.\")\n\n    client = TileClient(data)\n    layer = get_leaflet_tile_layer(client, name=name, **kwargs)\n    self.add_layer(layer)\n\n    if zoom_to_layer:\n       self.center = client.center()\n       self.zoom = client.default_zoom\n</code></pre>"},{"location":"netpanda/#netpanda.netpanda.Map.add_route","title":"<code>add_route(self, start, end, color='blue', weight=2)</code>","text":"<p>Adds a route to the routes list. Routes will be drawn when draw_routes is called.</p> <p>Parameters:</p> Name Type Description Default <code>start</code> <code>tuple</code> <p>The starting point of the route as (latitude, longitude).</p> required <code>end</code> <code>tuple</code> <p>The ending point of the route as (latitude, longitude).</p> required <code>color</code> <code>str</code> <p>The color of the route line. Default is blue.</p> <code>'blue'</code> <code>weight</code> <code>int</code> <p>The thickness of the route line. Default is saved 2.</p> <code>2</code> Source code in <code>netpanda/netpanda.py</code> <pre><code>def add_route(self, start, end, color=\"blue\", weight=2):\n    \"\"\"\n    Adds a route to the routes list. Routes will be drawn when draw_routes is called.\n\n    Parameters:\n        start (tuple): The starting point of the route as (latitude, longitude).\n        end (tuple): The ending point of the route as (latitude, longitude).\n        color (str): The color of the route line. Default is blue.\n        weight (int): The thickness of the route line. Default is saved 2.\n    \"\"\"\n    line = Polyline(locations=[start, end], color=color, fill=False, weight=weight)\n    self.routes.append(line)\n</code></pre>"},{"location":"netpanda/#netpanda.netpanda.Map.add_shp","title":"<code>add_shp(self, data, name='shp', **kwargs)</code>","text":"<p>Adds a shapefile to the current map.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>str or dict</code> <p>The path to the shapefile as a string or an HTTP URL to a shapefile in a zip file.</p> required <code>name</code> <code>str</code> <p>The name of the layer. Defaults to \"shp\".</p> <code>'shp'</code> <code>**kwargs</code> <p>Arbitrary keyword arguments.</p> <code>{}</code> <p>Exceptions:</p> Type Description <code>TypeError</code> <p>If the data is neither a string nor an HTTP URL to a shapefile in a zip file.</p> <p>Returns:</p> Type Description <p>None</p> Source code in <code>netpanda/netpanda.py</code> <pre><code>def add_shp(self, data, name=\"shp\", **kwargs):\n    \"\"\"\n    Adds a shapefile to the current map.\n\n    Args:\n        data (str or dict): The path to the shapefile as a string or an HTTP URL to a shapefile in a zip file.\n        name (str, optional): The name of the layer. Defaults to \"shp\".\n        **kwargs: Arbitrary keyword arguments.\n\n    Raises:\n        TypeError: If the data is neither a string nor an HTTP URL to a shapefile in a zip file.\n\n    Returns:\n        None\n    \"\"\"\n\n    # Check if the data is an HTTP URL\n    if data.startswith(\"http\"):\n        # If it's an HTTP URL, fetch the zip file\n        response = requests.get(data)\n        with zipfile.ZipFile(io.BytesIO(response.content), 'r') as z:\n            # Extract the shapefile contents from the zip file\n            shp_files = [name for name in z.namelist() if name.endswith('.shp')]\n            if len(shp_files) == 0:\n                raise ValueError(\"No shapefile (.shp) found in the zip file.\")\n            shp_filename = shp_files[0]  # Assuming there's only one shapefile in the zip file\n            with z.open(shp_filename) as shp_file:\n                # Convert the shapefile contents to GeoJSON format\n                shp_reader = shapefile.Reader(shp_file)\n                data = shp_reader.__geo_interface__\n\n    elif isinstance(data, str):\n        # If it's a local file path, open and read the shapefile\n        with shapefile.Reader(data) as shp:\n            data = shp.__geo_interface__\n    else:\n        raise TypeError(\"Data must be a string representing a file path or an HTTP URL to a shapefile in a zip file.\")\n\n    # Add GeoJSON layer with provided name and additional keyword arguments\n</code></pre>"},{"location":"netpanda/#netpanda.netpanda.Map.add_toolbar","title":"<code>add_toolbar(self, position='topright')</code>","text":"<p>Adds a toolbar to the map.</p> <p>Parameters:</p> Name Type Description Default <code>position</code> <code>str</code> <p>The position of the toolbar. Defaults to \"topright\".</p> <code>'topright'</code> Source code in <code>netpanda/netpanda.py</code> <pre><code>def add_toolbar(self, position=\"topright\"):\n    \"\"\"Adds a toolbar to the map.\n\n    Args:\n        position (str, optional): The position of the toolbar. Defaults to \"topright\".\n    \"\"\"\n\n    padding = \"0px 0px 0px 5px\"  # upper, right, bottom, left\n\n    toolbar_button = widgets.ToggleButton(\n        value=False,\n        tooltip=\"Toolbar\",\n        icon=\"wrench\",\n        layout=widgets.Layout(width=\"28px\", height=\"28px\", padding=padding),\n    )\n\n    close_button = widgets.ToggleButton(\n        value=False,\n        tooltip=\"Close the tool\",\n        icon=\"times\",\n        button_style=\"primary\",\n        layout=widgets.Layout(height=\"28px\", width=\"28px\", padding=padding),\n    )\n\n    toolbar = widgets.VBox([toolbar_button])\n\n    def close_click(change):\n        if change[\"new\"]:\n            toolbar_button.close()\n            close_button.close()\n            toolbar.close()\n\n    close_button.observe(close_click, \"value\")\n\n    rows = 2\n    cols = 2\n    grid = widgets.GridspecLayout(\n        rows, cols, grid_gap=\"0px\", layout=widgets.Layout(width=\"65px\")\n    )\n\n    icons = [\"folder-open\", \"map\", \"info\", \"question\"]\n\n    for i in range(rows):\n        for j in range(cols):\n            grid[i, j] = widgets.Button(\n                description=\"\",\n                button_style=\"primary\",\n                icon=icons[i * rows + j],\n                layout=widgets.Layout(width=\"28px\", padding=\"0px\"),\n            )\n\n    def toolbar_click(change):\n        if change[\"new\"]:\n            toolbar.children = [widgets.HBox([close_button, toolbar_button]), grid]\n        else:\n            toolbar.children = [toolbar_button]\n\n    toolbar_button.observe(toolbar_click, \"value\")\n    toolbar_ctrl = WidgetControl(widget=toolbar, position=\"topright\")\n    self.add(toolbar_ctrl)\n\n    output = widgets.Output()\n    output_control = WidgetControl(widget=output, position=\"bottomright\")\n    self.add(output_control)\n\n    def toolbar_callback(change):\n        if change.icon == \"folder-open\":\n            with output:\n                output.clear_output()\n                print(f\"You can open a file\")\n        elif change.icon == \"map\":\n            with output:\n                output.clear_output()\n                print(f\"You can add a layer\")\n        else:\n            with output:\n                output.clear_output()\n                print(f\"Icon: {change.icon}\")\n\n    for tool in grid.children:\n        tool.on_click(toolbar_callback)\n</code></pre>"},{"location":"netpanda/#netpanda.netpanda.Map.add_vector","title":"<code>add_vector(self, data, name='vector_layer', **kwargs)</code>","text":"<p>Add vector data to the map.</p> <p>data (str or geopandas.GeoDataFrame): The vector data to add. This can be a file path or a GeoDataFrame. name (str, optional): The name of the vector layer. Defaults to \"vector_layer\". **kwargs: Additional keyword arguments for the vector layer.</p> Source code in <code>netpanda/netpanda.py</code> <pre><code>def add_vector(self, data, name=\"vector_layer\", **kwargs):\n    \"\"\"\n    Add vector data to the map.\n\n    Args:\n    data (str or geopandas.GeoDataFrame): The vector data to add. This can be a file path or a GeoDataFrame.\n    name (str, optional): The name of the vector layer. Defaults to \"vector_layer\".\n    **kwargs: Additional keyword arguments for the vector layer.\n    \"\"\"\n    import geopandas as gpd\n    from ipyleaflet import Map, GeoData\n\n    if isinstance(data, gpd.GeoDataFrame):\n     geo_data = GeoData(geo_dataframe=data, name=name, **kwargs)\n    elif isinstance(data, str):\n     geo_data = GeoData(geo_dataframe=gpd.read_file(data), name=name, **kwargs)\n    else:\n        raise ValueError(\"Unsupported data format. Please provide a GeoDataFrame or a file path.\")\n\n# Add the GeoData object to the map\n    self.add_layer(geo_data)\n</code></pre>"},{"location":"netpanda/#netpanda.netpanda.Map.add_widget","title":"<code>add_widget(self, widget, position='topright')</code>","text":"<p>Adds a widget to the map.</p> <p>widget (object): The widget to be added. position (str, optional): The position of the widget. Defaults to \"topright\".</p> Source code in <code>netpanda/netpanda.py</code> <pre><code>def add_widget(self, widget, position=\"topright\"):\n    \"\"\"Adds a widget to the map.\n\n    Args:\n    widget (object): The widget to be added.\n    position (str, optional): The position of the widget. Defaults to \"topright\".\n    \"\"\"\n    control = ipyleaflet.WidgetControl(widget=widget, position=position)\n    self.add_control(control)\n</code></pre>"},{"location":"netpanda/#netpanda.netpanda.Map.add_zoom_slider","title":"<code>add_zoom_slider(self, description='Zoom level', min=0, max=24, value=10, position='topright')</code>","text":"<p>Adds a zoom slider to the map.</p> <p>Parameters:</p> Name Type Description Default <code>position</code> <code>str</code> <p>The position of the zoom slider. Defaults to \"topright\".</p> <code>'topright'</code> Source code in <code>netpanda/netpanda.py</code> <pre><code>def add_zoom_slider(\n    self, description=\"Zoom level\", min=0, max=24, value=10, position=\"topright\"\n):\n    \"\"\"Adds a zoom slider to the map.\n\n    Args:\n        position (str, optional): The position of the zoom slider. Defaults to \"topright\".\n    \"\"\"\n    zoom_slider = widgets.IntSlider(\n        description=description, min=min, max=max, value=value\n    )\n\n    control = ipyleaflet.WidgetControl(widget=zoom_slider, position=position)\n    self.add(control)\n    widgets.jslink((zoom_slider, \"value\"), (self, \"zoom\"))\n</code></pre>"},{"location":"netpanda/#netpanda.netpanda.Map.draw_routes","title":"<code>draw_routes(self)</code>","text":"<p>Draws all routes stored in the routes list on the map.</p> Source code in <code>netpanda/netpanda.py</code> <pre><code>def draw_routes(self):\n    \"\"\"\n    Draws all routes stored in the routes list on the map.\n    \"\"\"\n    for route in self.routes:\n        self.add_layer(route)\n</code></pre>"},{"location":"usage/","title":"Usage","text":"<p>To use netpanda in a project:</p> <pre><code>import netpanda\n</code></pre>"},{"location":"Labs/lab4/","title":"Lab4","text":"In\u00a0[1]: Copied! <pre>from datetime import datetime\n\nnow = datetime.now()\nprint(f\"Submitted time: {now}\")\n</pre> from datetime import datetime  now = datetime.now() print(f\"Submitted time: {now}\") <pre>Submitted time: 2024-03-07 21:23:51.001050\n</pre> In\u00a0[2]: Copied! <pre>person_name = \"Bekub\"\nprint(f\"Hello {person_name}, you have no future.\")\n</pre> person_name = \"Bekub\" print(f\"Hello {person_name}, you have no future.\") <pre>Hello Bekub, you have no future.\n</pre> In\u00a0[3]: Copied! <pre>person_name = \"Codliver Shakib\"\nprint(f\"Lowercase: {person_name.lower()}\")\nprint(f\"Uppercase: {person_name.upper()}\")\nprint(f\"Title Case: {person_name.title()}\")\n</pre> person_name = \"Codliver Shakib\" print(f\"Lowercase: {person_name.lower()}\") print(f\"Uppercase: {person_name.upper()}\") print(f\"Title Case: {person_name.title()}\") <pre>Lowercase: codliver shakib\nUppercase: CODLIVER SHAKIB\nTitle Case: Codliver Shakib\n</pre> In\u00a0[4]: Copied! <pre>Professor_Snape = \"After all these time? Always\"\nprint(f\"Professor Snape replied to Professor Dumbledor question as, \\\"{Professor_Snape}\\\"\")\n</pre> Professor_Snape = \"After all these time? Always\" print(f\"Professor Snape replied to Professor Dumbledor question as, \\\"{Professor_Snape}\\\"\") <pre>Professor Snape replied to Professor Dumbledor question as, \"After all these time? Always\"\n</pre> In\u00a0[5]: Copied! <pre>person_name =\" Shabiha \\t Hossain \\nMajor:\\tGeography \\t \"\nprint(f\"Original Name: '{person_name}'\")\nprint(f\"lstrip(): '{person_name.lstrip()}'\")\nprint(f\"rstrip(): '{person_name.rstrip()}'\")\nprint(f\"strip(): '{person_name.strip()}'\")\n</pre> person_name =\" Shabiha \\t Hossain \\nMajor:\\tGeography \\t \" print(f\"Original Name: '{person_name}'\") print(f\"lstrip(): '{person_name.lstrip()}'\") print(f\"rstrip(): '{person_name.rstrip()}'\") print(f\"strip(): '{person_name.strip()}'\")  <pre>Original Name: ' Shabiha \t Hossain \nMajor:\tGeography \t '\nlstrip(): 'Shabiha \t Hossain \nMajor:\tGeography \t '\nrstrip(): ' Shabiha \t Hossain \nMajor:\tGeography'\nstrip(): 'Shabiha \t Hossain \nMajor:\tGeography'\n</pre> In\u00a0[6]: Copied! <pre>Names = ['Maisha','Tanbi', 'Sraboni']\nprint(Names[0])\nprint(Names[1])\nprint(Names[2])\n</pre> Names = ['Maisha','Tanbi', 'Sraboni'] print(Names[0]) print(Names[1]) print(Names[2]) <pre>Maisha\nTanbi\nSraboni\n</pre> In\u00a0[7]: Copied! <pre>Vehicles=['car', 'bike', 'train', 'bicycle']\nprint('I would like to travel by', Vehicles[2])\nprint('But one day I wish to buy a Tesla', Vehicles[0])\n</pre> Vehicles=['car', 'bike', 'train', 'bicycle'] print('I would like to travel by', Vehicles[2]) print('But one day I wish to buy a Tesla', Vehicles[0]) <pre>I would like to travel by train\nBut one day I wish to buy a Tesla car\n</pre> In\u00a0[8]: Copied! <pre>pizza=['pepperoni', 'mushroom', 'chicken alfredo', 'deep dish']\nfor i in pizza:\n  print(i)\n</pre> pizza=['pepperoni', 'mushroom', 'chicken alfredo', 'deep dish'] for i in pizza:   print(i) <pre>pepperoni\nmushroom\nchicken alfredo\ndeep dish\n</pre> In\u00a0[9]: Copied! <pre>verb=['hate', 'kinda like','love','absolutely love']\nfor verb, pizza in zip(verb,pizza):\n  print(\"I\", verb, pizza, \"pizza\")\n</pre> verb=['hate', 'kinda like','love','absolutely love'] for verb, pizza in zip(verb,pizza):   print(\"I\", verb, pizza, \"pizza\") <pre>I hate pepperoni pizza\nI kinda like mushroom pizza\nI love chicken alfredo pizza\nI absolutely love deep dish pizza\n</pre> <p>Add a line at the end of your program, outside the for loop, that states how much you like pizza. The output should consist of three or more lines about the kinds of pizza you like and then an additional sentence, such as I really love pizza!</p> In\u00a0[10]: Copied! <pre>pizza=['pepperoni', 'mushroom', 'chicken alfredo', 'deep dish']\nverb=['hate', 'kinda like','love','absolutely love']\nMessage='I can never get bored of eating pizza. My kind of adrenaline.'\n</pre> pizza=['pepperoni', 'mushroom', 'chicken alfredo', 'deep dish'] verb=['hate', 'kinda like','love','absolutely love'] Message='I can never get bored of eating pizza. My kind of adrenaline.' In\u00a0[11]: Copied! <pre>for verb, pizza in zip(verb,pizza):\n    print(\"I\", verb, pizza, \"pizza\")\nprint(Message)\n</pre> for verb, pizza in zip(verb,pizza):     print(\"I\", verb, pizza, \"pizza\") print(Message) <pre>I hate pepperoni pizza\nI kinda like mushroom pizza\nI love chicken alfredo pizza\nI absolutely love deep dish pizza\nI can never get bored of eating pizza. My kind of adrenaline.\n</pre> In\u00a0[12]: Copied! <pre>animals=['dog', 'cat', 'bird', 'rabbit']\nfor i in animals:print(i)\n</pre> animals=['dog', 'cat', 'bird', 'rabbit'] for i in animals:print(i) <pre>dog\ncat\nbird\nrabbit\n</pre> In\u00a0[13]: Copied! <pre>Line=['fluffy','cute','sweet','adorable']\nfor Line, animals in zip(Line,animals):\n    print(animals,\"is\", Line)\n</pre> Line=['fluffy','cute','sweet','adorable'] for Line, animals in zip(Line,animals):     print(animals,\"is\", Line) <pre>dog is fluffy\ncat is cute\nbird is sweet\nrabbit is adorable\n</pre> <p>Add a line at the end of your program stating what these animals have in common. You could print a sentence such as Any of these animals would make a great pet!</p> In\u00a0[14]: Copied! <pre>animals=['dog', 'cat', 'bird', 'rabbit']\nLine=['fluffy','cute','sweet','adorable']\nfor Line, animals in zip(Line,animals):\n    print(animals,\"is\", Line,\"and they are all designed to obey humans.\")\n</pre> animals=['dog', 'cat', 'bird', 'rabbit'] Line=['fluffy','cute','sweet','adorable'] for Line, animals in zip(Line,animals):     print(animals,\"is\", Line,\"and they are all designed to obey humans.\") <pre>dog is fluffy and they are all designed to obey humans.\ncat is cute and they are all designed to obey humans.\nbird is sweet and they are all designed to obey humans.\nrabbit is adorable and they are all designed to obey humans.\n</pre> In\u00a0[15]: Copied! <pre>Num=list(range(1,101))\n</pre> Num=list(range(1,101)) In\u00a0[16]: Copied! <pre>print(min(Num), max(Num))\n</pre> print(min(Num), max(Num)) <pre>1 100\n</pre> In\u00a0[17]: Copied! <pre>print(sum(Num))\n</pre> print(sum(Num)) <pre>5050\n</pre> In\u00a0[18]: Copied! <pre>start = 1\nend = 20\n\nif start % 2 != 0:\n\n    for num in range(start, end + 1, 2):\n        print(num, end=\" \")\nelse:\n\n    for num in range(start+1, end + 1, 2):\n        print(num, end=\" \")\n</pre> start = 1 end = 20  if start % 2 != 0:      for num in range(start, end + 1, 2):         print(num, end=\" \") else:      for num in range(start+1, end + 1, 2):         print(num, end=\" \") <pre>1 3 5 7 9 11 13 15 17 19 </pre> In\u00a0[19]: Copied! <pre>Threes = [i for i in range(3, 30) if i % 3 == 0]\nprint(Threes)\n</pre> Threes = [i for i in range(3, 30) if i % 3 == 0] print(Threes) <pre>[3, 6, 9, 12, 15, 18, 21, 24, 27]\n</pre> In\u00a0[20]: Copied! <pre>Z = [number**3 for number in range(1,11)]\n\nfor T in Z:\n    print(T)\n</pre> Z = [number**3 for number in range(1,11)]  for T in Z:     print(T) <pre>1\n8\n27\n64\n125\n216\n343\n512\n729\n1000\n</pre> In\u00a0[21]: Copied! <pre>pizza=['pepperoni', 'mushroom', 'chicken alfredo', 'deep dish', 'sausage', 'seafood', 'shrimp']\n</pre> pizza=['pepperoni', 'mushroom', 'chicken alfredo', 'deep dish', 'sausage', 'seafood', 'shrimp'] In\u00a0[22]: Copied! <pre>print('The first three items in the list are:', (pizza[:3]))\n</pre> print('The first three items in the list are:', (pizza[:3])) <pre>The first three items in the list are: ['pepperoni', 'mushroom', 'chicken alfredo']\n</pre> <p>Print the message Three items from the middle of the list are:. Use a slice to print three items from the middle of the list.</p> In\u00a0[23]: Copied! <pre>middle_start = len(pizza) // 2 - 1 \nmiddle_end = middle_start + 3 \nprint('The three items from the middle in the list are:', (pizza[middle_start:middle_end]))\n</pre> middle_start = len(pizza) // 2 - 1  middle_end = middle_start + 3  print('The three items from the middle in the list are:', (pizza[middle_start:middle_end]))  <pre>The three items from the middle in the list are: ['chicken alfredo', 'deep dish', 'sausage']\n</pre> <p>Print the message The last three items in the list are:. Use a slice to print the last three items in the list.</p> In\u00a0[24]: Copied! <pre>print('The last three items in the list are:', (pizza[-3:]))\n</pre> print('The last three items in the list are:', (pizza[-3:])) <pre>The last three items in the list are: ['sausage', 'seafood', 'shrimp']\n</pre> In\u00a0[25]: Copied! <pre>Our_foods = (\n    'pasta', 'chowmein', 'curry','mousse', 'lemonade',\n    )\n\nprint(\"Our menu offers:\")\nfor food in Our_foods:\n    print(f\"- {food}\")\n</pre> Our_foods = (     'pasta', 'chowmein', 'curry','mousse', 'lemonade',     )  print(\"Our menu offers:\") for food in Our_foods:     print(f\"- {food}\") <pre>Our menu offers:\n- pasta\n- chowmein\n- curry\n- mousse\n- lemonade\n</pre> <p>The restaurant changes its menu, replacing two of the items with different foods. Add a line that rewrites the tuple, and then use a for loop to print each of the items on the revised menu.</p> In\u00a0[26]: Copied! <pre>Revised_foods = (\n    'vegetables', 'chowmein', 'chicken curry','mousse', 'lemonade',\n    )\n\nprint(\"Little change in our menu has been authorized.\")\nprint(\"\\nOur revised menu offers now:\")\nfor food in Revised_foods:\n    print(f\"- {food}\")\n</pre> Revised_foods = (     'vegetables', 'chowmein', 'chicken curry','mousse', 'lemonade',     )  print(\"Little change in our menu has been authorized.\") print(\"\\nOur revised menu offers now:\") for food in Revised_foods:     print(f\"- {food}\") <pre>Little change in our menu has been authorized.\n\nOur revised menu offers now:\n- vegetables\n- chowmein\n- chicken curry\n- mousse\n- lemonade\n</pre> In\u00a0[27]: Copied! <pre>alien_color = 'green'\n\nif alien_color == 'green':\n    print(\"You just earned 5 points!\")\n</pre> alien_color = 'green'  if alien_color == 'green':     print(\"You just earned 5 points!\") <pre>You just earned 5 points!\n</pre> In\u00a0[28]: Copied! <pre>alien_color = 'red'\n\nif alien_color == 'green':\n    print(\"You just earned 5 points!\")\n</pre> alien_color = 'red'  if alien_color == 'green':     print(\"You just earned 5 points!\") In\u00a0[29]: Copied! <pre>age = 21\n\nif age &lt; 2:\n    print(\"You're a baby\")\nelif age &lt; 4:\n    print(\"You're a toddler\")\nelif age &lt; 13:\n    print(\"You're a kid\")\nelif age &lt; 20:\n    print(\"You're a teenager\")\nelif age &lt; 65:\n    print(\"You're an adult\")\nelse:\n    print(\"You're an elder\")\n</pre> age = 21  if age &lt; 2:     print(\"You're a baby\") elif age &lt; 4:     print(\"You're a toddler\") elif age &lt; 13:     print(\"You're a kid\") elif age &lt; 20:     print(\"You're a teenager\") elif age &lt; 65:     print(\"You're an adult\") else:     print(\"You're an elder\") <pre>You're an adult\n</pre> In\u00a0[30]: Copied! <pre>favorite_fruits = ['mangoes', 'bananas', 'oranges']\n\nif 'bananas' in favorite_fruits:\n    print(\"You really like bananas!\")\nif 'apples' in favorite_fruits:\n    print(\"You really like apples!\")\nelse:\n    print(\"apples are not your fav!\")\nif 'oranges' in favorite_fruits:\n    print(\"You really like oranges!\")\nif 'blueberries' in favorite_fruits:\n    print(\"You really like blueberries!\")\nelse: \n    print(\"blueberries are not your fav!\")\nif 'mangoes' in favorite_fruits:\n    print(\"You really like mangoes!\")\n</pre> favorite_fruits = ['mangoes', 'bananas', 'oranges']  if 'bananas' in favorite_fruits:     print(\"You really like bananas!\") if 'apples' in favorite_fruits:     print(\"You really like apples!\") else:     print(\"apples are not your fav!\") if 'oranges' in favorite_fruits:     print(\"You really like oranges!\") if 'blueberries' in favorite_fruits:     print(\"You really like blueberries!\") else:      print(\"blueberries are not your fav!\") if 'mangoes' in favorite_fruits:     print(\"You really like mangoes!\") <pre>You really like bananas!\napples are not your fav!\nYou really like oranges!\nblueberries are not your fav!\nYou really like mangoes!\n</pre> In\u00a0[31]: Copied! <pre>username =['admin', 'meem', 'nazifa', 'max','lucas']\nfor name in username:\n  if name =='admin':\n    print('Hello admin, would you like to see a status report?')\n  else:\n    print(f\"Hello {name}, thank you for logging in again!\")\n</pre> username =['admin', 'meem', 'nazifa', 'max','lucas'] for name in username:   if name =='admin':     print('Hello admin, would you like to see a status report?')   else:     print(f\"Hello {name}, thank you for logging in again!\") <pre>Hello admin, would you like to see a status report?\nHello meem, thank you for logging in again!\nHello nazifa, thank you for logging in again!\nHello max, thank you for logging in again!\nHello lucas, thank you for logging in again!\n</pre> In\u00a0[32]: Copied! <pre>current_users =['admin', 'meem', 'nazifa', 'max','lucas']\nnew_users=['matt', 'Nazifa', 'Jeff', 'ken', 'MAX']\n</pre> current_users =['admin', 'meem', 'nazifa', 'max','lucas'] new_users=['matt', 'Nazifa', 'Jeff', 'ken', 'MAX'] In\u00a0[33]: Copied! <pre>current_users_lower = [user.lower() for user in current_users]\n\nfor new_user in new_users:\n    if new_user.lower() in current_users_lower:\n        print(f\"Sorry {new_user}, the name is taken.\")\n    else:\n        print(f\"Great, {new_user} is available.\")\n</pre> current_users_lower = [user.lower() for user in current_users]  for new_user in new_users:     if new_user.lower() in current_users_lower:         print(f\"Sorry {new_user}, the name is taken.\")     else:         print(f\"Great, {new_user} is available.\") <pre>Great, matt is available.\nSorry Nazifa, the name is taken.\nGreat, Jeff is available.\nGreat, ken is available.\nSorry MAX, the name is taken.\n</pre> In\u00a0[34]: Copied! <pre>numbers = list(range(1,10))\n\nfor number in numbers:\n    if number == 1:\n        print(\"1st\")\n    elif number == 2:\n        print(\"2nd\")\n    elif number == 3:\n        print(\"3rd\")\n    else:\n        print(f\"{number}th\")\n</pre> numbers = list(range(1,10))  for number in numbers:     if number == 1:         print(\"1st\")     elif number == 2:         print(\"2nd\")     elif number == 3:         print(\"3rd\")     else:         print(f\"{number}th\") <pre>1st\n2nd\n3rd\n4th\n5th\n6th\n7th\n8th\n9th\n</pre>"},{"location":"Labs/lab4/#lab-4","title":"Lab-4\u00b6","text":""},{"location":"Labs/lab4/#question-1","title":"Question 1\u00b6","text":"<p>Personal Message: Use a variable to represent a person\u2019s name, and print a message to that person. Your message should be simple, such as, \u201cHello Eric, would you like to learn some Python today?\u201d</p>"},{"location":"Labs/lab4/#question-2","title":"Question 2\u00b6","text":"<p>Name Cases: Use a variable to represent a person\u2019s name, and then print that person\u2019s name in lowercase, uppercase, and title case.</p>"},{"location":"Labs/lab4/#question-3","title":"Question 3\u00b6","text":"<p>Famous Quote: Find a quote from a famous person you admire. Print the quote and the name of its author. Your output should look something like the following, including the quotation marks:</p> <pre><code>Albert Einstein once said, \u201cA person who never made a mistake never tried anything new.\u201d\n</code></pre>"},{"location":"Labs/lab4/#question-4","title":"Question 4\u00b6","text":"<p>Stripping Names: Use a variable to represent a person\u2019s name, and include some whitespace characters at the beginning and end of the name. Make sure you use each character combination, \"\\t\" and \"\\n\", at least once. Print the name once, so the whitespace around the name is displayed. Then print the name using each of the three stripping functions, lstrip(), rstrip(), and strip().</p>"},{"location":"Labs/lab4/#question-5","title":"Question 5\u00b6","text":"<p>Names: Store the names of a few of your friends in a list called names. Print each person\u2019s name by accessing each element in the list, one at a time.</p>"},{"location":"Labs/lab4/#question-6","title":"Question 6\u00b6","text":"<p>Your Own List: Think of your favorite mode of transportation, such as a motorcycle or a car, and make a list that stores several examples. Use your list to print a series of statements about these items, such as \u201cI would like to own a Honda motorcycle.\u201d</p>"},{"location":"Labs/lab4/#question-7","title":"Question 7\u00b6","text":"<p>Pizzas: Think of at least three kinds of your favorite pizza. Store these pizza names in a list, and then use a for loop to print the name of each pizza.</p> <p>Modify your for loop to print a sentence using the name of the pizza instead of printing just the name of the pizza. For each pizza you should have one line of output containing a simple statement like I like pepperoni pizza.</p>"},{"location":"Labs/lab4/#question-8","title":"Question 8\u00b6","text":"<p>Animals: Think of at least three different animals that have a common characteristic. Store the names of these animals in a list, and then use a for loop to print out the name of each animal.</p> <p>Modify your program to print a statement about each animal, such as A dog would make a great pet.</p>"},{"location":"Labs/lab4/#question-9","title":"Question 9\u00b6","text":"<p>Summing a Hundred: Make a list of the numbers from one to one hundred, and then use <code>min()</code> and <code>max()</code> to make sure your list actually starts at one and ends at one hundred. Also, use the sum() function to see how quickly Python can add a hundred numbers.</p>"},{"location":"Labs/lab4/#question-10","title":"Question 10\u00b6","text":"<p>Odd Numbers: Use the third argument of the <code>range()</code> function to make a list of the odd numbers from 1 to 20. Use a <code>for</code> loop to print each number.</p>"},{"location":"Labs/lab4/#question-11","title":"Question 11\u00b6","text":"<p>Threes: Make a list of the multiples of 3 from 3 to 30. Use a <code>for</code> loop to print the numbers in your list.</p>"},{"location":"Labs/lab4/#question-12","title":"Question 12\u00b6","text":"<p>Cube Comprehension: Use a list comprehension to generate a list of the first 10 cubes.</p>"},{"location":"Labs/lab4/#question-13","title":"Question 13\u00b6","text":"<p>Slices: Using one of the programs you wrote in this lab, add several lines to the end of the program that do the following:</p> <p>Print the message The first three items in the list are:. Then use a slice to print the first three items from that program\u2019s list.</p>"},{"location":"Labs/lab4/#question-14","title":"Question 14\u00b6","text":"<p>Buffet: A buffet-style restaurant offers only five basic foods. Think of five simple foods, and store them in a tuple.</p> <p>Use a for loop to print each food the restaurant offers.</p>"},{"location":"Labs/lab4/#question-15","title":"Question 15\u00b6","text":"<p>Alien Colors: Imagine an alien was just shot down in a game. Create a variable called <code>alien_color</code> and assign it a value of <code>green, yellow,</code> or <code>red</code>.</p> <ul> <li>Write an if statement to test whether the alien\u2019s color is green. If it is, print a message that the player just earned 5 points.</li> <li>Write one version of this program that passes the if test and another that fails. (The version that fails will have no output.)</li> </ul>"},{"location":"Labs/lab4/#question-16","title":"Question 16\u00b6","text":"<p>Stages of Life: Write an <code>if-elif-else</code> chain that determines a person\u2019s stage of life. Set a value for the variable <code>age</code>, and then:</p> <ul> <li>If the person is less than 2 years old, print a message that the person is a baby.</li> <li>If the person is at least 2 years old but less than 4, print a message that the person is a toddler.</li> <li>If the person is at least 4 years old but less than 13, print a message that the person is a kid.</li> <li>If the person is at least 13 years old but less than 20, print a message that the person is a teenager.</li> <li>If the person is at least 20 years old but less than 65, print a message that the person is an adult.</li> </ul>"},{"location":"Labs/lab4/#question-17","title":"Question 17\u00b6","text":"<p>Favorite Fruit: Make a list of your favorite fruits, and then write a series of independent <code>if</code> statements that check for certain fruits in your list.</p> <ul> <li>Make a list of your three favorite fruits and call it favorite_fruits.</li> <li>Write five if statements. Each should check whether a certain kind of fruit is in your list. If the fruit is in your list, the if block should print a statement, such as You really like bananas!</li> </ul>"},{"location":"Labs/lab4/#question-18","title":"Question 18\u00b6","text":"<p>Hello Admin: Make a list of five or more usernames, including the name <code>admin</code>. Imagine you are writing code that will print a greeting to each user after they log in to a website. Loop through the list, and print a greeting to each user:</p> <ul> <li>If the username is 'admin', print a special greeting, such as Hello admin, would you like to see a status report?</li> <li>Otherwise, print a generic greeting, such as Hello Jaden, thank you for logging in again.</li> </ul>"},{"location":"Labs/lab4/#question-19","title":"Question 19\u00b6","text":"<p>Checking Usernames: Do the following to create a program that simulates how websites ensure that everyone has a unique username.</p> <ul> <li>Make a list of five or more usernames called <code>current_users</code>.</li> <li>Make another list of five usernames called <code>new_users</code>. Make sure one or two of the new usernames are also in the <code>current_users</code> list.</li> <li>Loop through the <code>new_users</code> list to see if each new username has already been used. If it has, print a message that the person will need to enter a new username. If a username has not been used, print a message saying that the username is available.</li> <li>Make sure your comparison is case insensitive. If 'John' has been used, 'JOHN' should not be accepted. (To do this, you\u2019ll need to make a copy of <code>current_users</code> containing the lowercase versions of all existing users.)</li> </ul>"},{"location":"Labs/lab4/#question-20","title":"Question 20\u00b6","text":"<p>Ordinal Numbers: Ordinal numbers indicate their position in a list, such as 1st or 2nd. Most ordinal numbers end in th, except 1, 2, and 3.</p> <ul> <li>Store the numbers 1 through 9 in a list.</li> <li>Loop through the list.</li> <li>Use an <code>if-elif-else</code> chain inside the loop to print the proper ordinal ending for each number. Your output should read \"1st 2nd 3rd 4th 5th 6th 7th 8th 9th\", and each result should be on a separate line.</li> </ul>"},{"location":"Labs/lab5/","title":"Lab5","text":"In\u00a0[1]: Copied! <pre>person_info = {\n    'first_name': 'Shabiha',\n    'last_name': 'Hossain',\n    'age': 86,\n    'city': 'Dhaka'\n}\n\nprint(\"First Name:\", person_info['first_name'])\nprint(\"Last Name:\", person_info['last_name'])\nprint(\"Age:\", person_info['age'])\nprint(\"City:\", person_info['city'])\n</pre> person_info = {     'first_name': 'Shabiha',     'last_name': 'Hossain',     'age': 86,     'city': 'Dhaka' }  print(\"First Name:\", person_info['first_name']) print(\"Last Name:\", person_info['last_name']) print(\"Age:\", person_info['age']) print(\"City:\", person_info['city']) <pre>First Name: Shabiha\nLast Name: Hossain\nAge: 86\nCity: Dhaka\n</pre> In\u00a0[2]: Copied! <pre>favorite_numbers = {\n    'Shabiha': 99,\n    'Sraboni': 105,\n    'Prerona': 11,\n    'Nawar': 39,\n    'Tanbi': 24\n}\n\nfor person, number in favorite_numbers.items():\n    print(f\"{person}'s favorite number is: {number}\")\n</pre> favorite_numbers = {     'Shabiha': 99,     'Sraboni': 105,     'Prerona': 11,     'Nawar': 39,     'Tanbi': 24 }  for person, number in favorite_numbers.items():     print(f\"{person}'s favorite number is: {number}\") <pre>Shabiha's favorite number is: 99\nSraboni's favorite number is: 105\nPrerona's favorite number is: 11\nNawar's favorite number is: 39\nTanbi's favorite number is: 24\n</pre> In\u00a0[3]: Copied! <pre>programming_glossary = {\n    'Variable': 'A named storage location in a program that holds a value.',\n    'Function': 'A reusable block of code that performs a specific task.',\n    'Loop': 'A programming structure that repeats a set of instructions until a certain condition is met.',\n    'List': 'An ordered collection of items that can be modified.',\n    'Dictionary': 'A collection of key-value pairs, where each key must be unique.'\n}\n\nfor term, meaning in programming_glossary.items():\n    print(f\"{term}:\\n{meaning}\\n\")\n</pre> programming_glossary = {     'Variable': 'A named storage location in a program that holds a value.',     'Function': 'A reusable block of code that performs a specific task.',     'Loop': 'A programming structure that repeats a set of instructions until a certain condition is met.',     'List': 'An ordered collection of items that can be modified.',     'Dictionary': 'A collection of key-value pairs, where each key must be unique.' }  for term, meaning in programming_glossary.items():     print(f\"{term}:\\n{meaning}\\n\") <pre>Variable:\nA named storage location in a program that holds a value.\n\nFunction:\nA reusable block of code that performs a specific task.\n\nLoop:\nA programming structure that repeats a set of instructions until a certain condition is met.\n\nList:\nAn ordered collection of items that can be modified.\n\nDictionary:\nA collection of key-value pairs, where each key must be unique.\n\n</pre> In\u00a0[4]: Copied! <pre>programming_glossary['Module'] = 'A file containing Python definitions and statements.'\nprogramming_glossary['Exception'] = 'An event that occurs during the execution of a program and disrupts the normal flow of instructions.'\nprogramming_glossary['Tuple'] = 'An immutable ordered collection of elements.'\nprogramming_glossary['Boolean'] = 'A data type that has one of two possible values: True or False.'\nprogramming_glossary['Method'] = 'A function that is associated with an object and can be called on that object.'\n\nprint(\"\\nUpdated Glossary:\")\nfor term, meaning in programming_glossary.items():\n    print(f\"{term}:\\n{meaning}\\n\")\n</pre> programming_glossary['Module'] = 'A file containing Python definitions and statements.' programming_glossary['Exception'] = 'An event that occurs during the execution of a program and disrupts the normal flow of instructions.' programming_glossary['Tuple'] = 'An immutable ordered collection of elements.' programming_glossary['Boolean'] = 'A data type that has one of two possible values: True or False.' programming_glossary['Method'] = 'A function that is associated with an object and can be called on that object.'  print(\"\\nUpdated Glossary:\") for term, meaning in programming_glossary.items():     print(f\"{term}:\\n{meaning}\\n\") <pre>\nUpdated Glossary:\nVariable:\nA named storage location in a program that holds a value.\n\nFunction:\nA reusable block of code that performs a specific task.\n\nLoop:\nA programming structure that repeats a set of instructions until a certain condition is met.\n\nList:\nAn ordered collection of items that can be modified.\n\nDictionary:\nA collection of key-value pairs, where each key must be unique.\n\nModule:\nA file containing Python definitions and statements.\n\nException:\nAn event that occurs during the execution of a program and disrupts the normal flow of instructions.\n\nTuple:\nAn immutable ordered collection of elements.\n\nBoolean:\nA data type that has one of two possible values: True or False.\n\nMethod:\nA function that is associated with an object and can be called on that object.\n\n</pre> In\u00a0[5]: Copied! <pre>major_rivers = {\n    'Nile': 'Egypt',\n    'Brahmaputra': 'Bangladesh',\n    'Amur': 'Russia'\n}\n\nfor river, country in major_rivers.items():\n    print(f\"The {river} runs through {country}.\")\n\nprint(\"\\nNames of the rivers:\")\nfor river in major_rivers.keys():\n    print(river)\n\nprint(\"\\nNames of the countries:\")\nfor country in major_rivers.values():\n    print(country)\n</pre> major_rivers = {     'Nile': 'Egypt',     'Brahmaputra': 'Bangladesh',     'Amur': 'Russia' }  for river, country in major_rivers.items():     print(f\"The {river} runs through {country}.\")  print(\"\\nNames of the rivers:\") for river in major_rivers.keys():     print(river)  print(\"\\nNames of the countries:\") for country in major_rivers.values():     print(country)  <pre>The Nile runs through Egypt.\nThe Brahmaputra runs through Bangladesh.\nThe Amur runs through Russia.\n\nNames of the rivers:\nNile\nBrahmaputra\nAmur\n\nNames of the countries:\nEgypt\nBangladesh\nRussia\n</pre> In\u00a0[6]: Copied! <pre>cities = {\n    'Dhaka': {\n        'country': 'Bangladesh',\n        'population': 10352000,\n        'fact': 'Dhaka is famous for many street foods.'\n    },\n    'Chittagong': {\n        'country': 'Bangladesh',\n        'population': 397000,\n        'fact': 'Chittagong is known for Patenga and Coxs Bazar Sea Beach.'\n    },\n    'Khulna': {\n        'country': 'Bangladesh',\n        'population': 156000,\n        'fact': 'Khulna has its World Heritage Site, Sundarban.'\n    }\n}\n\nfor city, city_info in cities.items():\n    print(f\"\\nCity: {city}\")\n    print(f\"Country: {city_info['country']}\")\n    print(f\"Population: {city_info['population']}\")\n    print(f\"Fact: {city_info['fact']}\")\n</pre> cities = {     'Dhaka': {         'country': 'Bangladesh',         'population': 10352000,         'fact': 'Dhaka is famous for many street foods.'     },     'Chittagong': {         'country': 'Bangladesh',         'population': 397000,         'fact': 'Chittagong is known for Patenga and Coxs Bazar Sea Beach.'     },     'Khulna': {         'country': 'Bangladesh',         'population': 156000,         'fact': 'Khulna has its World Heritage Site, Sundarban.'     } }  for city, city_info in cities.items():     print(f\"\\nCity: {city}\")     print(f\"Country: {city_info['country']}\")     print(f\"Population: {city_info['population']}\")     print(f\"Fact: {city_info['fact']}\")  <pre>\nCity: Dhaka\nCountry: Bangladesh\nPopulation: 10352000\nFact: Dhaka is famous for many street foods.\n\nCity: Chittagong\nCountry: Bangladesh\nPopulation: 397000\nFact: Chittagong is known for Patenga and Coxs Bazar Sea Beach.\n\nCity: Khulna\nCountry: Bangladesh\nPopulation: 156000\nFact: Khulna has its World Heritage Site, Sundarban.\n</pre> In\u00a0[7]: Copied! <pre>user_input = input(\"What kind of rental car would you like? \")\nprint(f\"Let me see if I can find you a {user_input}.\")\n</pre> user_input = input(\"What kind of rental car would you like? \") print(f\"Let me see if I can find you a {user_input}.\") <pre>Let me see if I can find you a Honda Civic.\n</pre> In\u00a0[8]: Copied! <pre>num_people = int(input(\"How many people are in your dinner group? \"))\nif num_people &gt; 8:\n    print(\"I'm sorry, you'll have to wait for a table.\")\nelse:\n    print(\"Your table is ready. Enjoy your meal!\")\n</pre> num_people = int(input(\"How many people are in your dinner group? \")) if num_people &gt; 8:     print(\"I'm sorry, you'll have to wait for a table.\") else:     print(\"Your table is ready. Enjoy your meal!\") <pre>I'm sorry, you'll have to wait for a table.\n</pre> In\u00a0[9]: Copied! <pre>user_number = int(input(\"Enter a number: \"))\nif user_number % 10 == 0:\n    print(f\"{user_number} is a multiple of 10.\")\nelse:\n    print(f\"{user_number} is not a multiple of 10.\")\n</pre> user_number = int(input(\"Enter a number: \")) if user_number % 10 == 0:     print(f\"{user_number} is a multiple of 10.\") else:     print(f\"{user_number} is not a multiple of 10.\") <pre>8 is not a multiple of 10.\n</pre> In\u00a0[10]: Copied! <pre>pizza_toppings = []\nwhile True:\n    topping = input(\"Enter a pizza topping (type 'quit' to finish): \")\n\n    if topping.lower() == 'quit':\n        break\n\n    pizza_toppings.append(topping)\n    print(f\"Adding {topping} to your pizza.\")\n\nif pizza_toppings:\n    print(\"\\nYour pizza will have the following toppings:\")\n    for topping in pizza_toppings:\n        print(\"- \" + topping)\nelse:\n    print(\"You didn't choose any toppings for your pizza.\")\n</pre> pizza_toppings = [] while True:     topping = input(\"Enter a pizza topping (type 'quit' to finish): \")      if topping.lower() == 'quit':         break      pizza_toppings.append(topping)     print(f\"Adding {topping} to your pizza.\")  if pizza_toppings:     print(\"\\nYour pizza will have the following toppings:\")     for topping in pizza_toppings:         print(\"- \" + topping) else:     print(\"You didn't choose any toppings for your pizza.\") <pre>Adding sausage to your pizza.\nAdding mushroom to your pizza.\nAdding chicken to your pizza.\nAdding olive to your pizza.\nAdding cheese to your pizza.\n\nYour pizza will have the following toppings:\n- sausage\n- mushroom\n- chicken\n- olive\n- cheese\n</pre> In\u00a0[11]: Copied! <pre>def display_message():\n    print(\"In this chapter, I am learning how to define function, call dictionaries, and python basics.\")\ndisplay_message()\n</pre> def display_message():     print(\"In this chapter, I am learning how to define function, call dictionaries, and python basics.\") display_message() <pre>In this chapter, I am learning how to define function, call dictionaries, and python basics.\n</pre> In\u00a0[12]: Copied! <pre>def favorite_book(title):\n    print(f\"One of my favorite books is {title}.\")\nfavorite_book(\"The Da Vinci Code\")\n</pre> def favorite_book(title):     print(f\"One of my favorite books is {title}.\") favorite_book(\"The Da Vinci Code\") <pre>One of my favorite books is The Da Vinci Code.\n</pre> In\u00a0[13]: Copied! <pre>def make_shirt(size, message):\n    print(f\"Making a {size}-sized shirt with the message: '{message}'.\")\n\nmake_shirt(\"Medium\", \"I see you!\")\nmake_shirt(size=\"Large\", message=\"Bamboozled!\")\n</pre> def make_shirt(size, message):     print(f\"Making a {size}-sized shirt with the message: '{message}'.\")  make_shirt(\"Medium\", \"I see you!\") make_shirt(size=\"Large\", message=\"Bamboozled!\") <pre>Making a Medium-sized shirt with the message: 'I see you!'.\nMaking a Large-sized shirt with the message: 'Bamboozled!'.\n</pre> In\u00a0[14]: Copied! <pre>def make_shirt(size=\"Large\", message=\"I love Python\"):\n    print(f\"Making a {size}-sized shirt with the message: '{message}'.\")\nmake_shirt()\nmake_shirt(size=\"Medium\")\nmake_shirt(size=\"Small\", message=\"Code!gnorant\")\n</pre> def make_shirt(size=\"Large\", message=\"I love Python\"):     print(f\"Making a {size}-sized shirt with the message: '{message}'.\") make_shirt() make_shirt(size=\"Medium\") make_shirt(size=\"Small\", message=\"Code!gnorant\") <pre>Making a Large-sized shirt with the message: 'I love Python'.\nMaking a Medium-sized shirt with the message: 'I love Python'.\nMaking a Small-sized shirt with the message: 'Code!gnorant'.\n</pre> In\u00a0[15]: Copied! <pre>def describe_city(city, country=\"Bangladesh\"):\n    print(f\"{city} is in {country}.\")\n\ndescribe_city(\"Dhaka\", \"Bangladesh\")\ndescribe_city(\"Seoul\", \"South Korea\")\ndescribe_city(\"Chittagong\")\n</pre> def describe_city(city, country=\"Bangladesh\"):     print(f\"{city} is in {country}.\")  describe_city(\"Dhaka\", \"Bangladesh\") describe_city(\"Seoul\", \"South Korea\") describe_city(\"Chittagong\") <pre>Dhaka is in Bangladesh.\nSeoul is in South Korea.\nChittagong is in Bangladesh.\n</pre> In\u00a0[16]: Copied! <pre>def city_country(city, country):\n    return f\"{city}, {country}\"\n\nlocation1 = city_country(\"Tennessee\", \"USA\")\nlocation2 = city_country(\"Dhaka\", \"Bangladesh\")\nlocation3 = city_country(\"Mumbai\", \"India\")\nprint(location1)\nprint(location2)\nprint(location3)\n</pre> def city_country(city, country):     return f\"{city}, {country}\"  location1 = city_country(\"Tennessee\", \"USA\") location2 = city_country(\"Dhaka\", \"Bangladesh\") location3 = city_country(\"Mumbai\", \"India\") print(location1) print(location2) print(location3) <pre>Tennessee, USA\nDhaka, Bangladesh\nMumbai, India\n</pre> In\u00a0[17]: Copied! <pre>def make_album(artist, title, num_songs=None):\n    album = {'artist': artist, 'title': title}\n    if num_songs is not None:\n        album['num_songs'] = num_songs\n    return album\n\nalbum1 = make_album(\"Elvis Presley\", \"Blue Hawaii\", num_songs=14)\nalbum2 = make_album(\"Imagine Dragons\", \"Night Visions\")\nalbum3 = make_album(\"Michael Jackson\", \"Immortal\", num_songs=26)\n\nprint(album1)\nprint(album2)\nprint(album3)\n</pre> def make_album(artist, title, num_songs=None):     album = {'artist': artist, 'title': title}     if num_songs is not None:         album['num_songs'] = num_songs     return album  album1 = make_album(\"Elvis Presley\", \"Blue Hawaii\", num_songs=14) album2 = make_album(\"Imagine Dragons\", \"Night Visions\") album3 = make_album(\"Michael Jackson\", \"Immortal\", num_songs=26)  print(album1) print(album2) print(album3)  <pre>{'artist': 'Elvis Presley', 'title': 'Blue Hawaii', 'num_songs': 14}\n{'artist': 'Imagine Dragons', 'title': 'Night Visions'}\n{'artist': 'Michael Jackson', 'title': 'Immortal', 'num_songs': 26}\n</pre> In\u00a0[18]: Copied! <pre>def make_album(artist, title):\n    if artist and title:\n        album = {'artist': artist, 'title': title}\n        return album\n    else:\n        print(\"Invalid input. Both artist and title must be provided.\")\n\n\nwhile True:\n\n    artist_input = input(\"Enter the artist (type 'quit' to exit): \")\n    \n    if artist_input.lower() == 'quit':\n        break \n\n    title_input = input(\"Enter the album title: \")\n\n    if title_input.lower() == 'quit':\n        break  \n    album_dict = make_album(artist_input, title_input)\n\n    if album_dict:\n        print(album_dict)\n</pre> def make_album(artist, title):     if artist and title:         album = {'artist': artist, 'title': title}         return album     else:         print(\"Invalid input. Both artist and title must be provided.\")   while True:      artist_input = input(\"Enter the artist (type 'quit' to exit): \")          if artist_input.lower() == 'quit':         break       title_input = input(\"Enter the album title: \")      if title_input.lower() == 'quit':         break       album_dict = make_album(artist_input, title_input)      if album_dict:         print(album_dict) <pre>{'artist': 'Coldplay', 'title': 'Universe'}\n</pre> In\u00a0[19]: Copied! <pre>def show_messages(messages):\n    for message in messages:\n        print(message)\n\ntext_messages = [\n    \"Good Morning\",\n    \"How are you?\",\n    \"Do you have any plan tonight?\",\n    \"See you soon.\"\n]\n\nshow_messages(text_messages)\n</pre> def show_messages(messages):     for message in messages:         print(message)  text_messages = [     \"Good Morning\",     \"How are you?\",     \"Do you have any plan tonight?\",     \"See you soon.\" ]  show_messages(text_messages)  <pre>Good Morning\nHow are you?\nDo you have any plan tonight?\nSee you soon.\n</pre> In\u00a0[20]: Copied! <pre>def show_messages(messages):\n    for message in messages:\n        print(message)\n\ndef send_messages(messages, sent_messages):\n    while messages:\n        current_message = messages.pop(0)\n        print(f\"Sending message: {current_message}\")\n        sent_messages.append(current_message)\n\ntext_messages = [\n     \"Good Morning\",\n    \"How are you?\",\n    \"Do you have any plan tonight?\",\n    \"See you soon.\"\n]\n\nsent_messages = []\nsend_messages(text_messages, sent_messages)\n\nprint(\"Original Messages:\")\nshow_messages(text_messages)\n\nprint(\"\\nSent Messages:\")\nshow_messages(sent_messages)\n</pre> def show_messages(messages):     for message in messages:         print(message)  def send_messages(messages, sent_messages):     while messages:         current_message = messages.pop(0)         print(f\"Sending message: {current_message}\")         sent_messages.append(current_message)  text_messages = [      \"Good Morning\",     \"How are you?\",     \"Do you have any plan tonight?\",     \"See you soon.\" ]  sent_messages = [] send_messages(text_messages, sent_messages)  print(\"Original Messages:\") show_messages(text_messages)  print(\"\\nSent Messages:\") show_messages(sent_messages) <pre>Sending message: Good Morning\nSending message: How are you?\nSending message: Do you have any plan tonight?\nSending message: See you soon.\nOriginal Messages:\n\nSent Messages:\nGood Morning\nHow are you?\nDo you have any plan tonight?\nSee you soon.\n</pre> In\u00a0[36]: Copied! <pre>with open('Learning_python.txt', 'r') as file:\n    content = file.read()\n    print(\"Reading the entire file:\")\n    print(content)\n\nwith open('Learning_python.txt', 'r') as file:\n    print(\"\\nLooping over the file object:\")\n    for line in file:\n        print(line.strip()) \n\nwith open('Learning_python.txt', 'r') as file:\n    lines = file.readlines()\nprint(\"\\nWorking with lines outside the with block:\")\nfor line in lines:\n    print(line.strip())\n</pre> with open('Learning_python.txt', 'r') as file:     content = file.read()     print(\"Reading the entire file:\")     print(content)  with open('Learning_python.txt', 'r') as file:     print(\"\\nLooping over the file object:\")     for line in file:         print(line.strip())   with open('Learning_python.txt', 'r') as file:     lines = file.readlines() print(\"\\nWorking with lines outside the with block:\") for line in lines:     print(line.strip()) <pre>Reading the entire file:\nIn python you can learn how to make do coding effortlessly. \nIn python you can learn defining class and calling functions. \nIn python, you can also learn about variables. lists and statements.   \n\nLooping over the file object:\nIn python you can learn how to make do coding effortlessly.\nIn python you can learn defining class and calling functions.\nIn python, you can also learn about variables. lists and statements.\n\nWorking with lines outside the with block:\nIn python you can learn how to make do coding effortlessly.\nIn python you can learn defining class and calling functions.\nIn python, you can also learn about variables. lists and statements.\n</pre> In\u00a0[37]: Copied! <pre>with open('Learning_python.txt', 'r') as file:\n    lines = file.readlines()\n\nmodified_lines = []\nfor line in lines:\n    modified_line = line.replace('python', 'C++')\n    modified_lines.append(modified_line)\n\nprint(\"\\nModified lines (replacing 'python' with 'C++'):\")\nfor modified_line in modified_lines:\n    print(modified_line.strip())\n</pre> with open('Learning_python.txt', 'r') as file:     lines = file.readlines()  modified_lines = [] for line in lines:     modified_line = line.replace('python', 'C++')     modified_lines.append(modified_line)  print(\"\\nModified lines (replacing 'python' with 'C++'):\") for modified_line in modified_lines:     print(modified_line.strip()) <pre>\nModified lines (replacing 'python' with 'C++'):\nIn C++ you can learn how to make do coding effortlessly.\nIn C++ you can learn defining class and calling functions.\nIn C++, you can also learn about variables. lists and statements.\n</pre> In\u00a0[23]: Copied! <pre>user_name = input(\"Please enter your name: \")\n\nwith open('guest.txt', 'w') as file:\n    file.write(user_name)\n\nprint(f\"Thank you, {user_name}! Your name has been added to guest.txt.\")\n</pre> user_name = input(\"Please enter your name: \")  with open('guest.txt', 'w') as file:     file.write(user_name)  print(f\"Thank you, {user_name}! Your name has been added to guest.txt.\") <pre>Thank you, Nazifa! Your name has been added to guest.txt.\n</pre> In\u00a0[24]: Copied! <pre>filename = 'guest_book.txt'\n\nwhile True:\n    user_name = input(\"Please enter your name (type 'quit' to exit): \")\n\n    if user_name.lower() == 'quit':\n        break\n\n    print(f\"Welcome, {user_name}!\")\n\n    with open(filename, 'a') as file:\n        file.write(f\"{user_name}\\n\")\n\nprint(\"Thank you for visiting! Your entries have been recorded in guest_book.txt.\")\n</pre> filename = 'guest_book.txt'  while True:     user_name = input(\"Please enter your name (type 'quit' to exit): \")      if user_name.lower() == 'quit':         break      print(f\"Welcome, {user_name}!\")      with open(filename, 'a') as file:         file.write(f\"{user_name}\\n\")  print(\"Thank you for visiting! Your entries have been recorded in guest_book.txt.\") <pre>Welcome, Meem!\nWelcome, Shakib!\nWelcome, Shabiha!\nThank you for visiting! Your entries have been recorded in guest_book.txt.\n</pre> In\u00a0[25]: Copied! <pre>filename = 'user_response.txt'\n\nwhile True:\n    user_response = input(\"Why do you like programming? (type 'quit' to exit): \")\n\n    if user_response.lower() == 'quit':\n        break\n\n    with open(filename, 'a') as file:\n        file.write(f\"{user_response}\\n\")\n\nprint(\"Thank you for sharing your reasons! The responses have been recorded in user_response.txt.\")\n</pre> filename = 'user_response.txt'  while True:     user_response = input(\"Why do you like programming? (type 'quit' to exit): \")      if user_response.lower() == 'quit':         break      with open(filename, 'a') as file:         file.write(f\"{user_response}\\n\")  print(\"Thank you for sharing your reasons! The responses have been recorded in user_response.txt.\") <pre>Thank you for sharing your reasons! The responses have been recorded in user_response.txt.\n</pre> In\u00a0[26]: Copied! <pre>try:\n    num1 = float(input(\"Enter the first number: \"))\n    num2 = float(input(\"Enter the second number: \"))\n\n    result = num1 + num2\n    print(f\"The sum of {num1} and {num2} is: {result}\")\n\nexcept ValueError:\n    print(\"Error: Please enter valid numeric values.\")\n</pre> try:     num1 = float(input(\"Enter the first number: \"))     num2 = float(input(\"Enter the second number: \"))      result = num1 + num2     print(f\"The sum of {num1} and {num2} is: {result}\")  except ValueError:     print(\"Error: Please enter valid numeric values.\") <pre>The sum of 9.0 and 7.0 is: 16.0\n</pre> In\u00a0[27]: Copied! <pre>while True:\n    try:\n\n        user_input = input(\"Enter the first number (type 'quit' to exit): \")\n\n        if user_input.lower() == 'quit':\n            break\n\n        num1 = float(user_input)\n        num2 = float(input(\"Enter the second number: \"))\n        result = num1 + num2\n\n        print(f\"The sum of {num1} and {num2} is: {result}\")\n\n    except ValueError:\n        print(\"Error: Please enter valid numeric values.\")\n</pre> while True:     try:          user_input = input(\"Enter the first number (type 'quit' to exit): \")          if user_input.lower() == 'quit':             break          num1 = float(user_input)         num2 = float(input(\"Enter the second number: \"))         result = num1 + num2          print(f\"The sum of {num1} and {num2} is: {result}\")      except ValueError:         print(\"Error: Please enter valid numeric values.\") <pre>The sum of 2.0 and 67.0 is: 69.0\nError: Please enter valid numeric values.\nThe sum of 4.0 and 6.0 is: 10.0\n</pre> In\u00a0[28]: Copied! <pre>try:\n\n    with open('cats.txt', 'r') as cats_file:\n        cats_content = cats_file.read()\n        print(\"Contents of cats.txt:\")\n        print(cats_content)\n\nexcept FileNotFoundError as e:\n    print(f\"Error reading cats.txt: {e}\")\n\ntry:\n    with open('dogs.txt', 'r') as dogs_file:\n        dogs_content = dogs_file.read()\n        print(\"\\nContents of dogs.txt:\")\n        print(dogs_content)\n\nexcept FileNotFoundError as e:\n    print(f\"Error reading dogs.txt: {e}\")\n</pre> try:      with open('cats.txt', 'r') as cats_file:         cats_content = cats_file.read()         print(\"Contents of cats.txt:\")         print(cats_content)  except FileNotFoundError as e:     print(f\"Error reading cats.txt: {e}\")  try:     with open('dogs.txt', 'r') as dogs_file:         dogs_content = dogs_file.read()         print(\"\\nContents of dogs.txt:\")         print(dogs_content)  except FileNotFoundError as e:     print(f\"Error reading dogs.txt: {e}\") <pre>Error reading cats.txt: [Errno 2] No such file or directory: 'cats.txt'\n\nContents of dogs.txt:\nLuna\nPi\nHachiko   \n</pre> In\u00a0[29]: Copied! <pre>try:\n    \n    with open('cats.txt', 'r') as cats_file:\n        cats_content = cats_file.read()\n        print(\"Contents of cats.txt:\")\n        print(cats_content)\n\nexcept FileNotFoundError:\n    pass\n\ntry:\n    with open('dogs.txt', 'r') as dogs_file:\n        dogs_content = dogs_file.read()\n        print(\"\\nContents of dogs.txt:\")\n        print(dogs_content)\n\nexcept FileNotFoundError:\n    pass\n</pre> try:          with open('cats.txt', 'r') as cats_file:         cats_content = cats_file.read()         print(\"Contents of cats.txt:\")         print(cats_content)  except FileNotFoundError:     pass  try:     with open('dogs.txt', 'r') as dogs_file:         dogs_content = dogs_file.read()         print(\"\\nContents of dogs.txt:\")         print(dogs_content)  except FileNotFoundError:     pass <pre>\nContents of dogs.txt:\nLuna\nPi\nHachiko   \n</pre> In\u00a0[30]: Copied! <pre>line = \"Row, row, row your boat\"\nline.count(\"row\")\n</pre> line = \"Row, row, row your boat\" line.count(\"row\") Out[30]: <pre>2</pre> In\u00a0[31]: Copied! <pre>line.lower().count(\"row\")\n</pre> line.lower().count(\"row\") Out[31]: <pre>3</pre> <p>Notice that converting the string to lowercase using lower() catches all appearances of the word you\u2019re looking for, regardless of how it\u2019s formatted.</p> <p>Write a program that reads the files you found at Project Gutenberg and determines how many times the word <code>the</code> appears in each text. This will be an approximation because it will also count words such as <code>then</code> and <code>there</code>. Try counting <code>the</code>, with a space in the string, and see how much lower your count is.</p> In\u00a0[32]: Copied! <pre>def count_word_occurrences(file_path, word):\n    try:\n        with open(file_path, 'r', encoding='utf-8') as file:\n            content = file.read()\n            word_count = content.count(word)\n\n            word_count_case_insensitive = content.lower().count(word.lower())\n\n            print(f\"Occurrences of '{word}' (case-sensitive): {word_count}\")\n            print(f\"Occurrences of '{word}' (case-insensitive): {word_count_case_insensitive}\")\n\n    except FileNotFoundError:\n        print(f\"Error: File '{file_path}' not found.\")\n\ncount_word_occurrences(r'C:\\Users\\Shabiha\\arcgeo\\docs\\Labs\\copyfile.txt', 'the')\n</pre> def count_word_occurrences(file_path, word):     try:         with open(file_path, 'r', encoding='utf-8') as file:             content = file.read()             word_count = content.count(word)              word_count_case_insensitive = content.lower().count(word.lower())              print(f\"Occurrences of '{word}' (case-sensitive): {word_count}\")             print(f\"Occurrences of '{word}' (case-insensitive): {word_count_case_insensitive}\")      except FileNotFoundError:         print(f\"Error: File '{file_path}' not found.\")  count_word_occurrences(r'C:\\Users\\Shabiha\\arcgeo\\docs\\Labs\\copyfile.txt', 'the') <pre>Occurrences of 'the' (case-sensitive): 26\nOccurrences of 'the' (case-insensitive): 27\n</pre>"},{"location":"Labs/lab5/#lab-5","title":"Lab 5\u00b6","text":""},{"location":"Labs/lab5/#question-1","title":"Question 1\u00b6","text":"<p>Person: Use a dictionary to store information about a person you know. Store their first name, last name, age, and the city in which they live. You should have keys such as first_name, last_name, age, and city. Print each piece of information stored in your dictionary.</p>"},{"location":"Labs/lab5/#question-2","title":"Question 2\u00b6","text":"<p>Favorite Numbers: Use a dictionary to store people\u2019s favorite numbers. Think of five names, and use them as keys in your dictionary. Think of a favorite number for each person, and store each as a value in your dictionary. Print each person\u2019s name and their favorite number. For even more fun, poll a few friends and get some actual data for your program.</p>"},{"location":"Labs/lab5/#question-3","title":"Question 3\u00b6","text":"<p>Glossary: A Python dictionary can be used to model an actual dictionary. However, to avoid confusion, let\u2019s call it a glossary.</p> <ul> <li>Think of five programming words you\u2019ve learned about in the previous chapters. Use these words as the keys in your glossary, and store their meanings as values.</li> <li>Print each word and its meaning as neatly formatted output. You might print the word followed by a colon and then its meaning, or print the word on one line and then print its meaning indented on a second line. Use the newline character (\\n) to insert a blank line between each word-meaning pair in your output.</li> </ul>"},{"location":"Labs/lab5/#question-4","title":"Question 4\u00b6","text":"<p>Glossary 2: Now that you know how to loop through a dictionary, clean up the code from Question 3 by replacing your series of print() calls with a loop that runs through the dictionary\u2019s keys and values. When you\u2019re sure that your loop works, add five more Python terms to your glossary. When you run your program again, these new words and meanings should automatically be included in the output.</p>"},{"location":"Labs/lab5/#question-5","title":"Question 5\u00b6","text":"<p>Rivers: Make a dictionary containing three major rivers and the country each river runs through. One key-value pair might be 'nile': 'egypt'.</p> <ul> <li>Use a loop to print a sentence about each river, such as The Nile runs through Egypt.</li> <li>Use a loop to print the name of each river included in the dictionary.</li> <li>Use a loop to print the name of each country included in the dictionary.</li> </ul>"},{"location":"Labs/lab5/#question-6","title":"Question 6\u00b6","text":"<p>Cities: Make a dictionary called <code>cities</code>. Use the names of three cities as keys in your dictionary. Create a dictionary of information about each city and include the country that the city is in, its approximate population, and one fact about that city. The keys for each city\u2019s dictionary should be something like <code>country</code>, <code>population</code>, and <code>fact</code>. Print the name of each city and all of the information you have stored about it.</p>"},{"location":"Labs/lab5/#question-7","title":"Question 7\u00b6","text":"<p>Rental Car: Write a program that asks the user what kind of rental car they would like. Print a message about that car, such as \u201cLet me see if I can find you a Subaru.\u201d</p>"},{"location":"Labs/lab5/#question-8","title":"Question 8\u00b6","text":"<p>Restaurant Seating: Write a program that asks the user how many people are in their dinner group. If the answer is more than eight, print a message saying they\u2019ll have to wait for a table. Otherwise, report that their table is ready.</p>"},{"location":"Labs/lab5/#question-9","title":"Question 9\u00b6","text":"<p>Multiples of Ten: Ask the user for a number, and then report whether the number is a multiple of 10 or not.</p>"},{"location":"Labs/lab5/#question-10","title":"Question 10\u00b6","text":"<p>Pizza Toppings: Write a loop that prompts the user to enter a series of pizza toppings until they enter a 'quit' value. As they enter each topping, print a message saying you\u2019ll add that topping to their pizza.</p>"},{"location":"Labs/lab5/#question-11","title":"Question 11\u00b6","text":"<p>Message: Write a function called <code>display_message()</code> that prints one sentence telling everyone what you are learning about in this chapter. Call the function, and make sure the message displays correctly.</p>"},{"location":"Labs/lab5/#question-12","title":"Question 12\u00b6","text":"<p>Favorite Book: Write a function called <code>favorite_book()</code> that accepts one parameter, title. The function should print a message, such as <code>One of my favorite books is Alice in Wonderland</code>. Call the function, making sure to include a book title as an argument in the function call.</p>"},{"location":"Labs/lab5/#question-13","title":"Question 13\u00b6","text":"<p>T-Shirt: Write a function called <code>make_shirt()</code> that accepts a size and the text of a message that should be printed on the shirt. The function should print a sentence summarizing the size of the shirt and the message printed on it.</p> <p>Call the function once using positional arguments to make a shirt. Call the function a second time using keyword arguments.</p>"},{"location":"Labs/lab5/#question-14","title":"Question 14\u00b6","text":"<p>Large Shirts: Modify the <code>make_shirt()</code> function so that shirts are large by default with a message that reads I love Python. Make a large shirt and a medium shirt with the default message, and a shirt of any size with a different message.</p>"},{"location":"Labs/lab5/#question-15","title":"Question 15\u00b6","text":"<p>Cities: Write a function called <code>describe_city()</code> that accepts the name of a city and its country. The function should print a simple sentence, such as <code>Reykjavik is in Iceland</code>. Give the parameter for the country a default value. Call your function for three different cities, at least one of which is not in the default country.</p>"},{"location":"Labs/lab5/#question-16","title":"Question 16\u00b6","text":"<p>City Names: Write a function called <code>city_country()</code> that takes in the name of a city and its country. The function should return a string formatted like this:</p> <pre>Santiago, Chile\n</pre> <p>Call your function with at least three city-country pairs, and print the values that are returned.</p>"},{"location":"Labs/lab5/#question-17","title":"Question 17\u00b6","text":"<p>Album: Write a function called <code>make_album()</code> that builds a dictionary describing a music album. The function should take in an artist name and an album title, and it should return a dictionary containing these two pieces of information. Use the function to make three dictionaries representing different albums. Print each return value to show that the dictionaries are storing the album information correctly.</p> <p>Use None to add an optional parameter to make_album() that allows you to store the number of songs on an album. If the calling line includes a value for the number of songs, add that value to the album\u2019s dictionary. Make at least one new function call that includes the number of songs on an album.</p>"},{"location":"Labs/lab5/#question-18","title":"Question 18\u00b6","text":"<p>User Albums: Start with your program from Question 17. Write a <code>while</code> loop that allows users to enter an album\u2019s artist and title. Once you have that information, call <code>make_album()</code> with the user\u2019s input and print the dictionary that\u2019s created. Be sure to include a quit value in the <code>while</code> loop.</p>"},{"location":"Labs/lab5/#question-19","title":"Question 19\u00b6","text":"<p>Messages: Make a list containing a series of short text messages. Pass the list to a function called <code>show_messages()</code>, which prints each text message.</p>"},{"location":"Labs/lab5/#question-20","title":"Question 20\u00b6","text":"<p>Sending Messages: Start with a copy of your program from Question 19. Write a function called <code>send_messages()</code> that prints each text message and moves each message to a new list called <code>sent_messages</code> as it\u2019s printed. After calling the function, print both of your lists to make sure the messages were moved correctly.</p>"},{"location":"Labs/lab5/#question-21","title":"Question 21\u00b6","text":"<p>Learning Python: Open a blank file in your text editor and write a few lines summarizing what you\u2019ve learned about Python so far. Start each line with the phrase In Python you can. . .. Save the file as learning_python.txt in the same directory as your exercises from this chapter. Write a program that reads the file and prints what you wrote three times. Print the contents once by reading in the entire file, once by looping over the file object, and once by storing the lines in a list and then working with them outside the with block.</p>"},{"location":"Labs/lab5/#question-22","title":"Question 22\u00b6","text":"<p>Learning C: You can use the replace() method to replace any word in a string with a different word. Here\u2019s a quick example showing how to replace 'dog' with 'cat' in a sentence:</p> <pre>message = \"I really like dogs.\"\nmessage.replace('dog', 'cat')\n'I really like cats.'\n</pre> <p>Read in each line from the file you just created, learning_python.txt, and replace the word Python with the name of another language, such as C. Print each modified line to the screen.</p>"},{"location":"Labs/lab5/#question-23","title":"Question 23\u00b6","text":"<p>Guest: Write a program that prompts the user for their name. When they respond, write their name to a file called guest.txt.</p>"},{"location":"Labs/lab5/#question-24","title":"Question 24\u00b6","text":"<p>Guest Book: Write a while loop that prompts users for their name. When they enter their name, print a greeting to the screen and add a line recording their visit in a file called guest_book.txt. Make sure each entry appears on a new line in the file.</p>"},{"location":"Labs/lab5/#question-25","title":"Question 25\u00b6","text":"<p>Programming Poll: Write a while loop that asks people why they like programming. Each time someone enters a reason, add their reason to a file that stores all the responses.</p>"},{"location":"Labs/lab5/#question-26","title":"Question 26\u00b6","text":"<p>Addition: One common problem when prompting for numerical input occurs when people provide text instead of numbers. When you try to convert the input to an int, you\u2019ll get a ValueError. Write a program that prompts for two numbers. Add them together and print the result. Catch the ValueError if either input value is not a number, and print a friendly error message. Test your program by entering two numbers and then by entering some text instead of a number.</p>"},{"location":"Labs/lab5/#question-27","title":"Question 27\u00b6","text":"<p>Addition Calculator: Wrap your code from Question 26 in a while loop so the user can continue entering numbers even if they make a mistake and enter text instead of a number.</p>"},{"location":"Labs/lab5/#question-28","title":"Question 28\u00b6","text":"<p>Cats and Dogs: Make two files, cats.txt and dogs.txt. Store at least three names of cats in the first file and three names of dogs in the second file. Write a program that tries to read these files and print the contents of the file to the screen. Wrap your code in a <code>try-except</code> block to catch the <code>FileNotFound</code> error, and print a friendly message if a file is missing. Move one of the files to a different location on your system, and make sure the code in the <code>except</code> block executes properly.</p>"},{"location":"Labs/lab5/#question-29","title":"Question 29\u00b6","text":"<p>Silent Cats and Dogs: Modify your except block in Question 28 to fail silently if either file is missing.</p>"},{"location":"Labs/lab5/#question-30","title":"Question 30\u00b6","text":"<p>Common Words: Visit Project Gutenberg (https://gutenberg.org/) and find a few texts you\u2019d like to analyze. Download the text files for these works, or copy the raw text from your browser into a text file on your computer. You can use the <code>count()</code> method to find out how many times a word or phrase appears in a string. For example, the following code counts the number of times 'row' appears in a string:</p>"},{"location":"examples/AirMap/","title":"AirMap","text":"In\u00a0[\u00a0]: Copied! <pre>pip install netpanda\n</pre> pip install netpanda In\u00a0[1]: Copied! <pre>import netpanda\n</pre> import netpanda In\u00a0[2]: Copied! <pre>m = netpanda.Map(center=[35.0, -84.0], zoom=5)\nm.add_route(start=[35.9633, -83.9267], end=[33.7490, -84.3880], color=\"red\", weight=3) \nm.add_marker([35.9633, -83.9267], \"Knoxville\")\nm.add_marker([33.7490, -84.3880], \"Atlanta\")\nm.draw_routes()\nm\n</pre> m = netpanda.Map(center=[35.0, -84.0], zoom=5) m.add_route(start=[35.9633, -83.9267], end=[33.7490, -84.3880], color=\"red\", weight=3)  m.add_marker([35.9633, -83.9267], \"Knoxville\") m.add_marker([33.7490, -84.3880], \"Atlanta\") m.draw_routes() m  <pre>Map(center=[35.0, -84.0], controls=(ZoomControl(options=['position', 'zoom_in_text', 'zoom_in_title', 'zoom_ou\u2026</pre>"},{"location":"examples/Image/","title":"Image","text":"In\u00a0[\u00a0]: Copied! <pre>pip install netpanda\n</pre> pip install netpanda In\u00a0[1]: Copied! <pre>import netpanda\n</pre> import netpanda In\u00a0[3]: Copied! <pre>from ipyleaflet import Map, ImageOverlay\nfrom ipyleaflet import LayersControl\n</pre> from ipyleaflet import Map, ImageOverlay from ipyleaflet import LayersControl In\u00a0[3]: Copied! <pre>m = netpanda.Map()\n\nurl = \"https://media1.giphy.com/media/v1.Y2lkPTc5MGI3NjExMHJ1amJnNnM2NXY5dXQwcTlxd3QwcmxxeXIzbDN1MThyMXF1cDZhMiZlcD12MV9pbnRlcm5hbF9naWZfYnlfaWQmY3Q9Zw/TT3IizZ7sbkFDTsZWo/giphy.gif\"\nbounds = ((13, 100), (35, 130))\nm.add_image(url, bounds)\nm.scroll_wheel_zoom = True\nm\n</pre> m = netpanda.Map()  url = \"https://media1.giphy.com/media/v1.Y2lkPTc5MGI3NjExMHJ1amJnNnM2NXY5dXQwcTlxd3QwcmxxeXIzbDN1MThyMXF1cDZhMiZlcD12MV9pbnRlcm5hbF9naWZfYnlfaWQmY3Q9Zw/TT3IizZ7sbkFDTsZWo/giphy.gif\" bounds = ((13, 100), (35, 130)) m.add_image(url, bounds) m.scroll_wheel_zoom = True m <pre>Map(center=[20, 0], controls=(ZoomControl(options=['position', 'zoom_in_text', 'zoom_in_title', 'zoom_out_text\u2026</pre>"},{"location":"examples/Raster/","title":"Raster","text":"In\u00a0[\u00a0]: Copied! <pre>pip install netpanda\n</pre> pip install netpanda In\u00a0[1]: Copied! <pre>from localtileserver import TileClient, get_leaflet_tile_layer\nimport netpanda\n</pre> from localtileserver import TileClient, get_leaflet_tile_layer import netpanda In\u00a0[2]: Copied! <pre>m = netpanda.Map(add_layer_control=False)\ndata = \"https://github.com/opengeos/datasets/releases/download/raster/dem.tif\"\nm.add_raster(data, cmap=\"terrain\", name=\"DEM\")\nm.layers\nm.scroll_wheel_zoom = True\nm\n</pre> m = netpanda.Map(add_layer_control=False) data = \"https://github.com/opengeos/datasets/releases/download/raster/dem.tif\" m.add_raster(data, cmap=\"terrain\", name=\"DEM\") m.layers m.scroll_wheel_zoom = True m <pre>Map(center=[44.39836834327815, -122.75140966160018], controls=(ZoomControl(options=['position', 'zoom_in_text'\u2026</pre>"},{"location":"examples/Vector/","title":"Vector","text":"In\u00a0[5]: Copied! <pre>pip install netpanda\n</pre> pip install netpanda <pre>Requirement already satisfied: netpanda in c:\\users\\shabiha\\anaconda3\\envs\\geo\\lib\\site-packages (0.0.6)\nRequirement already satisfied: numpy in c:\\users\\shabiha\\anaconda3\\envs\\geo\\lib\\site-packages (from netpanda) (1.23.4)\nRequirement already satisfied: ipyleaflet in c:\\users\\shabiha\\anaconda3\\envs\\geo\\lib\\site-packages (from netpanda) (0.18.2)\nRequirement already satisfied: pandas in c:\\users\\shabiha\\anaconda3\\envs\\geo\\lib\\site-packages (from netpanda) (2.2.0)\nRequirement already satisfied: pyshp in c:\\users\\shabiha\\anaconda3\\envs\\geo\\lib\\site-packages (from netpanda) (2.3.1)\nRequirement already satisfied: geopandas in c:\\users\\shabiha\\anaconda3\\envs\\geo\\lib\\site-packages (from netpanda) (0.14.2)\nRequirement already satisfied: localtileserver in c:\\users\\shabiha\\anaconda3\\envs\\geo\\lib\\site-packages (from netpanda) (0.7.2)\nRequirement already satisfied: pylance in c:\\users\\shabiha\\anaconda3\\envs\\geo\\lib\\site-packages (from netpanda) (0.10.10)\nRequirement already satisfied: panel in c:\\users\\shabiha\\anaconda3\\envs\\geo\\lib\\site-packages (from netpanda) (1.3.8)\nRequirement already satisfied: ipywidgets in c:\\users\\shabiha\\anaconda3\\envs\\geo\\lib\\site-packages (from netpanda) (7.8.1)\nRequirement already satisfied: fiona&gt;=1.8.21 in c:\\users\\shabiha\\anaconda3\\envs\\geo\\lib\\site-packages (from geopandas-&gt;netpanda) (1.9.1)\nRequirement already satisfied: packaging in c:\\users\\shabiha\\anaconda3\\envs\\geo\\lib\\site-packages (from geopandas-&gt;netpanda) (23.2)\nRequirement already satisfied: pyproj&gt;=3.3.0 in c:\\users\\shabiha\\anaconda3\\envs\\geo\\lib\\site-packages (from geopandas-&gt;netpanda) (3.5.0)\nRequirement already satisfied: shapely&gt;=1.8.0 in c:\\users\\shabiha\\anaconda3\\envs\\geo\\lib\\site-packages (from geopandas-&gt;netpanda) (2.0.1)\nRequirement already satisfied: python-dateutil&gt;=2.8.2 in c:\\users\\shabiha\\anaconda3\\envs\\geo\\lib\\site-packages (from pandas-&gt;netpanda) (2.8.2)\nRequirement already satisfied: pytz&gt;=2020.1 in c:\\users\\shabiha\\anaconda3\\envs\\geo\\lib\\site-packages (from pandas-&gt;netpanda) (2023.3.post1)\nRequirement already satisfied: tzdata&gt;=2022.7 in c:\\users\\shabiha\\anaconda3\\envs\\geo\\lib\\site-packages (from pandas-&gt;netpanda) (2023.4)\nRequirement already satisfied: traittypes&lt;3,&gt;=0.2.1 in c:\\users\\shabiha\\anaconda3\\envs\\geo\\lib\\site-packages (from ipyleaflet-&gt;netpanda) (0.2.1)\nRequirement already satisfied: xyzservices&gt;=2021.8.1 in c:\\users\\shabiha\\anaconda3\\envs\\geo\\lib\\site-packages (from ipyleaflet-&gt;netpanda) (2024.4.0)\nRequirement already satisfied: branca&gt;=0.5.0 in c:\\users\\shabiha\\anaconda3\\envs\\geo\\lib\\site-packages (from ipyleaflet-&gt;netpanda) (0.7.0)\nRequirement already satisfied: comm&gt;=0.1.3 in c:\\users\\shabiha\\anaconda3\\envs\\geo\\lib\\site-packages (from ipywidgets-&gt;netpanda) (0.2.1)\nRequirement already satisfied: ipython-genutils~=0.2.0 in c:\\users\\shabiha\\anaconda3\\envs\\geo\\lib\\site-packages (from ipywidgets-&gt;netpanda) (0.2.0)\nRequirement already satisfied: traitlets&gt;=4.3.1 in c:\\users\\shabiha\\anaconda3\\envs\\geo\\lib\\site-packages (from ipywidgets-&gt;netpanda) (5.14.1)\nRequirement already satisfied: widgetsnbextension~=3.6.6 in c:\\users\\shabiha\\anaconda3\\envs\\geo\\lib\\site-packages (from ipywidgets-&gt;netpanda) (3.6.6)\nRequirement already satisfied: ipython&gt;=4.0.0 in c:\\users\\shabiha\\anaconda3\\envs\\geo\\lib\\site-packages (from ipywidgets-&gt;netpanda) (8.20.0)\nRequirement already satisfied: jupyterlab-widgets&lt;3,&gt;=1.0.0 in c:\\users\\shabiha\\anaconda3\\envs\\geo\\lib\\site-packages (from ipywidgets-&gt;netpanda) (1.1.7)\nRequirement already satisfied: click in c:\\users\\shabiha\\anaconda3\\envs\\geo\\lib\\site-packages (from localtileserver-&gt;netpanda) (8.1.7)\nRequirement already satisfied: flask&lt;3,&gt;=2.0.0 in c:\\users\\shabiha\\anaconda3\\envs\\geo\\lib\\site-packages (from localtileserver-&gt;netpanda) (2.3.3)\nRequirement already satisfied: Flask-Caching in c:\\users\\shabiha\\anaconda3\\envs\\geo\\lib\\site-packages (from localtileserver-&gt;netpanda) (2.1.0)\nRequirement already satisfied: flask-cors in c:\\users\\shabiha\\anaconda3\\envs\\geo\\lib\\site-packages (from localtileserver-&gt;netpanda) (4.0.0)\nRequirement already satisfied: flask-restx&gt;=0.5.0 in c:\\users\\shabiha\\anaconda3\\envs\\geo\\lib\\site-packages (from localtileserver-&gt;netpanda) (1.3.0)\nRequirement already satisfied: large-image&gt;=1.22.2 in c:\\users\\shabiha\\anaconda3\\envs\\geo\\lib\\site-packages (from large-image[rasterio]&gt;=1.22.2-&gt;localtileserver-&gt;netpanda) (1.27.1)\nRequirement already satisfied: requests in c:\\users\\shabiha\\anaconda3\\envs\\geo\\lib\\site-packages (from localtileserver-&gt;netpanda) (2.31.0)\nRequirement already satisfied: server-thread in c:\\users\\shabiha\\anaconda3\\envs\\geo\\lib\\site-packages (from localtileserver-&gt;netpanda) (0.2.0)\nRequirement already satisfied: scooby in c:\\users\\shabiha\\anaconda3\\envs\\geo\\lib\\site-packages (from localtileserver-&gt;netpanda) (0.9.2)\nRequirement already satisfied: werkzeug in c:\\users\\shabiha\\anaconda3\\envs\\geo\\lib\\site-packages (from localtileserver-&gt;netpanda) (3.0.1)\nRequirement already satisfied: bokeh&lt;3.4.0,&gt;=3.2.0 in c:\\users\\shabiha\\anaconda3\\envs\\geo\\lib\\site-packages (from panel-&gt;netpanda) (3.3.4)\nRequirement already satisfied: param&lt;3.0,&gt;=2.0.0 in c:\\users\\shabiha\\anaconda3\\envs\\geo\\lib\\site-packages (from panel-&gt;netpanda) (2.0.2)\nRequirement already satisfied: pyviz-comms&gt;=2.0.0 in c:\\users\\shabiha\\anaconda3\\envs\\geo\\lib\\site-packages (from panel-&gt;netpanda) (3.0.1)\nRequirement already satisfied: markdown in c:\\users\\shabiha\\anaconda3\\envs\\geo\\lib\\site-packages (from panel-&gt;netpanda) (3.5.2)\nRequirement already satisfied: markdown-it-py in c:\\users\\shabiha\\anaconda3\\envs\\geo\\lib\\site-packages (from panel-&gt;netpanda) (3.0.0)\nRequirement already satisfied: linkify-it-py in c:\\users\\shabiha\\anaconda3\\envs\\geo\\lib\\site-packages (from panel-&gt;netpanda) (2.0.2)\nRequirement already satisfied: mdit-py-plugins in c:\\users\\shabiha\\anaconda3\\envs\\geo\\lib\\site-packages (from panel-&gt;netpanda) (0.4.0)\nRequirement already satisfied: tqdm&gt;=4.48.0 in c:\\users\\shabiha\\anaconda3\\envs\\geo\\lib\\site-packages (from panel-&gt;netpanda) (4.66.1)\nRequirement already satisfied: bleach in c:\\users\\shabiha\\anaconda3\\envs\\geo\\lib\\site-packages (from panel-&gt;netpanda) (6.1.0)\nRequirement already satisfied: typing-extensions in c:\\users\\shabiha\\anaconda3\\envs\\geo\\lib\\site-packages (from panel-&gt;netpanda) (4.9.0)\nRequirement already satisfied: pyarrow&lt;15.0.1,&gt;=12 in c:\\users\\shabiha\\anaconda3\\envs\\geo\\lib\\site-packages (from pylance-&gt;netpanda) (15.0.0)\nRequirement already satisfied: Jinja2&gt;=2.9 in c:\\users\\shabiha\\anaconda3\\envs\\geo\\lib\\site-packages (from bokeh&lt;3.4.0,&gt;=3.2.0-&gt;panel-&gt;netpanda) (3.1.3)\nRequirement already satisfied: contourpy&gt;=1 in c:\\users\\shabiha\\anaconda3\\envs\\geo\\lib\\site-packages (from bokeh&lt;3.4.0,&gt;=3.2.0-&gt;panel-&gt;netpanda) (1.2.0)\nRequirement already satisfied: pillow&gt;=7.1.0 in c:\\users\\shabiha\\anaconda3\\envs\\geo\\lib\\site-packages (from bokeh&lt;3.4.0,&gt;=3.2.0-&gt;panel-&gt;netpanda) (10.2.0)\nRequirement already satisfied: PyYAML&gt;=3.10 in c:\\users\\shabiha\\anaconda3\\envs\\geo\\lib\\site-packages (from bokeh&lt;3.4.0,&gt;=3.2.0-&gt;panel-&gt;netpanda) (6.0.1)\nRequirement already satisfied: tornado&gt;=5.1 in c:\\users\\shabiha\\anaconda3\\envs\\geo\\lib\\site-packages (from bokeh&lt;3.4.0,&gt;=3.2.0-&gt;panel-&gt;netpanda) (6.4)\nRequirement already satisfied: attrs&gt;=19.2.0 in c:\\users\\shabiha\\anaconda3\\envs\\geo\\lib\\site-packages (from fiona&gt;=1.8.21-&gt;geopandas-&gt;netpanda) (23.2.0)\nRequirement already satisfied: certifi in c:\\users\\shabiha\\anaconda3\\envs\\geo\\lib\\site-packages (from fiona&gt;=1.8.21-&gt;geopandas-&gt;netpanda) (2024.2.2)\nRequirement already satisfied: click-plugins&gt;=1.0 in c:\\users\\shabiha\\anaconda3\\envs\\geo\\lib\\site-packages (from fiona&gt;=1.8.21-&gt;geopandas-&gt;netpanda) (1.1.1)\nRequirement already satisfied: cligj&gt;=0.5 in c:\\users\\shabiha\\anaconda3\\envs\\geo\\lib\\site-packages (from fiona&gt;=1.8.21-&gt;geopandas-&gt;netpanda) (0.7.2)\nRequirement already satisfied: munch&gt;=2.3.2 in c:\\users\\shabiha\\anaconda3\\envs\\geo\\lib\\site-packages (from fiona&gt;=1.8.21-&gt;geopandas-&gt;netpanda) (4.0.0)\nRequirement already satisfied: setuptools in c:\\users\\shabiha\\anaconda3\\envs\\geo\\lib\\site-packages (from fiona&gt;=1.8.21-&gt;geopandas-&gt;netpanda) (68.2.2)\nRequirement already satisfied: colorama in c:\\users\\shabiha\\anaconda3\\envs\\geo\\lib\\site-packages (from click-&gt;localtileserver-&gt;netpanda) (0.4.6)\nRequirement already satisfied: itsdangerous&gt;=2.1.2 in c:\\users\\shabiha\\anaconda3\\envs\\geo\\lib\\site-packages (from flask&lt;3,&gt;=2.0.0-&gt;localtileserver-&gt;netpanda) (2.1.2)\nRequirement already satisfied: blinker&gt;=1.6.2 in c:\\users\\shabiha\\anaconda3\\envs\\geo\\lib\\site-packages (from flask&lt;3,&gt;=2.0.0-&gt;localtileserver-&gt;netpanda) (1.7.0)\nRequirement already satisfied: aniso8601&gt;=0.82 in c:\\users\\shabiha\\anaconda3\\envs\\geo\\lib\\site-packages (from flask-restx&gt;=0.5.0-&gt;localtileserver-&gt;netpanda) (9.0.1)\nRequirement already satisfied: jsonschema in c:\\users\\shabiha\\anaconda3\\envs\\geo\\lib\\site-packages (from flask-restx&gt;=0.5.0-&gt;localtileserver-&gt;netpanda) (4.21.1)\nRequirement already satisfied: importlib-resources in c:\\users\\shabiha\\anaconda3\\envs\\geo\\lib\\site-packages (from flask-restx&gt;=0.5.0-&gt;localtileserver-&gt;netpanda) (6.1.1)\nRequirement already satisfied: decorator in c:\\users\\shabiha\\anaconda3\\envs\\geo\\lib\\site-packages (from ipython&gt;=4.0.0-&gt;ipywidgets-&gt;netpanda) (5.1.1)\nRequirement already satisfied: jedi&gt;=0.16 in c:\\users\\shabiha\\anaconda3\\envs\\geo\\lib\\site-packages (from ipython&gt;=4.0.0-&gt;ipywidgets-&gt;netpanda) (0.19.1)\nRequirement already satisfied: matplotlib-inline in c:\\users\\shabiha\\anaconda3\\envs\\geo\\lib\\site-packages (from ipython&gt;=4.0.0-&gt;ipywidgets-&gt;netpanda) (0.1.6)\nRequirement already satisfied: prompt-toolkit&lt;3.1.0,&gt;=3.0.41 in c:\\users\\shabiha\\anaconda3\\envs\\geo\\lib\\site-packages (from ipython&gt;=4.0.0-&gt;ipywidgets-&gt;netpanda) (3.0.43)\nRequirement already satisfied: pygments&gt;=2.4.0 in c:\\users\\shabiha\\anaconda3\\envs\\geo\\lib\\site-packages (from ipython&gt;=4.0.0-&gt;ipywidgets-&gt;netpanda) (2.17.2)\nRequirement already satisfied: stack-data in c:\\users\\shabiha\\anaconda3\\envs\\geo\\lib\\site-packages (from ipython&gt;=4.0.0-&gt;ipywidgets-&gt;netpanda) (0.6.3)\nRequirement already satisfied: cachetools in c:\\users\\shabiha\\anaconda3\\envs\\geo\\lib\\site-packages (from large-image&gt;=1.22.2-&gt;large-image[rasterio]&gt;=1.22.2-&gt;localtileserver-&gt;netpanda) (5.3.2)\nRequirement already satisfied: palettable in c:\\users\\shabiha\\anaconda3\\envs\\geo\\lib\\site-packages (from large-image&gt;=1.22.2-&gt;large-image[rasterio]&gt;=1.22.2-&gt;localtileserver-&gt;netpanda) (3.3.3)\nRequirement already satisfied: large-image-source-rasterio&gt;=1.27.1 in c:\\users\\shabiha\\anaconda3\\envs\\geo\\lib\\site-packages (from large-image[rasterio]&gt;=1.22.2-&gt;localtileserver-&gt;netpanda) (1.27.1)\nRequirement already satisfied: six&gt;=1.5 in c:\\users\\shabiha\\anaconda3\\envs\\geo\\lib\\site-packages (from python-dateutil&gt;=2.8.2-&gt;pandas-&gt;netpanda) (1.16.0)\nRequirement already satisfied: MarkupSafe&gt;=2.1.1 in c:\\users\\shabiha\\anaconda3\\envs\\geo\\lib\\site-packages (from werkzeug-&gt;localtileserver-&gt;netpanda) (2.1.4)\nRequirement already satisfied: notebook&gt;=4.4.1 in c:\\users\\shabiha\\anaconda3\\envs\\geo\\lib\\site-packages (from widgetsnbextension~=3.6.6-&gt;ipywidgets-&gt;netpanda) (7.0.7)\nRequirement already satisfied: webencodings in c:\\users\\shabiha\\anaconda3\\envs\\geo\\lib\\site-packages (from bleach-&gt;panel-&gt;netpanda) (0.5.1)\nRequirement already satisfied: cachelib&lt;0.10.0,&gt;=0.9.0 in c:\\users\\shabiha\\anaconda3\\envs\\geo\\lib\\site-packages (from Flask-Caching-&gt;localtileserver-&gt;netpanda) (0.9.0)\nRequirement already satisfied: uc-micro-py in c:\\users\\shabiha\\anaconda3\\envs\\geo\\lib\\site-packages (from linkify-it-py-&gt;panel-&gt;netpanda) (1.0.2)\nRequirement already satisfied: mdurl~=0.1 in c:\\users\\shabiha\\anaconda3\\envs\\geo\\lib\\site-packages (from markdown-it-py-&gt;panel-&gt;netpanda) (0.1.2)\nRequirement already satisfied: charset-normalizer&lt;4,&gt;=2 in c:\\users\\shabiha\\anaconda3\\envs\\geo\\lib\\site-packages (from requests-&gt;localtileserver-&gt;netpanda) (3.3.2)\nRequirement already satisfied: idna&lt;4,&gt;=2.5 in c:\\users\\shabiha\\anaconda3\\envs\\geo\\lib\\site-packages (from requests-&gt;localtileserver-&gt;netpanda) (3.6)\nRequirement already satisfied: urllib3&lt;3,&gt;=1.21.1 in c:\\users\\shabiha\\anaconda3\\envs\\geo\\lib\\site-packages (from requests-&gt;localtileserver-&gt;netpanda) (2.0.7)\nRequirement already satisfied: uvicorn in c:\\users\\shabiha\\anaconda3\\envs\\geo\\lib\\site-packages (from server-thread-&gt;localtileserver-&gt;netpanda) (0.27.0)\nRequirement already satisfied: parso&lt;0.9.0,&gt;=0.8.3 in c:\\users\\shabiha\\anaconda3\\envs\\geo\\lib\\site-packages (from jedi&gt;=0.16-&gt;ipython&gt;=4.0.0-&gt;ipywidgets-&gt;netpanda) (0.8.3)\nRequirement already satisfied: rasterio&gt;=1.3 in c:\\users\\shabiha\\anaconda3\\envs\\geo\\lib\\site-packages (from large-image-source-rasterio&gt;=1.27.1-&gt;large-image[rasterio]&gt;=1.22.2-&gt;localtileserver-&gt;netpanda) (1.3.6)\nRequirement already satisfied: jupyter-server&lt;3,&gt;=2.4.0 in c:\\users\\shabiha\\anaconda3\\envs\\geo\\lib\\site-packages (from notebook&gt;=4.4.1-&gt;widgetsnbextension~=3.6.6-&gt;ipywidgets-&gt;netpanda) (2.12.5)\nRequirement already satisfied: jupyterlab-server&lt;3,&gt;=2.22.1 in c:\\users\\shabiha\\anaconda3\\envs\\geo\\lib\\site-packages (from notebook&gt;=4.4.1-&gt;widgetsnbextension~=3.6.6-&gt;ipywidgets-&gt;netpanda) (2.25.2)\nRequirement already satisfied: jupyterlab&lt;5,&gt;=4.0.2 in c:\\users\\shabiha\\anaconda3\\envs\\geo\\lib\\site-packages (from notebook&gt;=4.4.1-&gt;widgetsnbextension~=3.6.6-&gt;ipywidgets-&gt;netpanda) (4.0.11)\nRequirement already satisfied: notebook-shim&lt;0.3,&gt;=0.2 in c:\\users\\shabiha\\anaconda3\\envs\\geo\\lib\\site-packages (from notebook&gt;=4.4.1-&gt;widgetsnbextension~=3.6.6-&gt;ipywidgets-&gt;netpanda) (0.2.3)\nRequirement already satisfied: wcwidth in c:\\users\\shabiha\\anaconda3\\envs\\geo\\lib\\site-packages (from prompt-toolkit&lt;3.1.0,&gt;=3.0.41-&gt;ipython&gt;=4.0.0-&gt;ipywidgets-&gt;netpanda) (0.2.13)\nRequirement already satisfied: jsonschema-specifications&gt;=2023.03.6 in c:\\users\\shabiha\\anaconda3\\envs\\geo\\lib\\site-packages (from jsonschema-&gt;flask-restx&gt;=0.5.0-&gt;localtileserver-&gt;netpanda) (2023.12.1)\nRequirement already satisfied: referencing&gt;=0.28.4 in c:\\users\\shabiha\\anaconda3\\envs\\geo\\lib\\site-packages (from jsonschema-&gt;flask-restx&gt;=0.5.0-&gt;localtileserver-&gt;netpanda) (0.32.1)\nRequirement already satisfied: rpds-py&gt;=0.7.1 in c:\\users\\shabiha\\anaconda3\\envs\\geo\\lib\\site-packages (from jsonschema-&gt;flask-restx&gt;=0.5.0-&gt;localtileserver-&gt;netpanda) (0.17.1)\nRequirement already satisfied: executing&gt;=1.2.0 in c:\\users\\shabiha\\anaconda3\\envs\\geo\\lib\\site-packages (from stack-data-&gt;ipython&gt;=4.0.0-&gt;ipywidgets-&gt;netpanda) (2.0.1)\nRequirement already satisfied: asttokens&gt;=2.1.0 in c:\\users\\shabiha\\anaconda3\\envs\\geo\\lib\\site-packages (from stack-data-&gt;ipython&gt;=4.0.0-&gt;ipywidgets-&gt;netpanda) (2.4.1)\nRequirement already satisfied: pure-eval in c:\\users\\shabiha\\anaconda3\\envs\\geo\\lib\\site-packages (from stack-data-&gt;ipython&gt;=4.0.0-&gt;ipywidgets-&gt;netpanda) (0.2.2)\nRequirement already satisfied: h11&gt;=0.8 in c:\\users\\shabiha\\anaconda3\\envs\\geo\\lib\\site-packages (from uvicorn-&gt;server-thread-&gt;localtileserver-&gt;netpanda) (0.14.0)\nRequirement already satisfied: anyio&gt;=3.1.0 in c:\\users\\shabiha\\anaconda3\\envs\\geo\\lib\\site-packages (from jupyter-server&lt;3,&gt;=2.4.0-&gt;notebook&gt;=4.4.1-&gt;widgetsnbextension~=3.6.6-&gt;ipywidgets-&gt;netpanda) (4.2.0)\nRequirement already satisfied: argon2-cffi in c:\\users\\shabiha\\anaconda3\\envs\\geo\\lib\\site-packages (from jupyter-server&lt;3,&gt;=2.4.0-&gt;notebook&gt;=4.4.1-&gt;widgetsnbextension~=3.6.6-&gt;ipywidgets-&gt;netpanda) (23.1.0)\nRequirement already satisfied: jupyter-client&gt;=7.4.4 in c:\\users\\shabiha\\anaconda3\\envs\\geo\\lib\\site-packages (from jupyter-server&lt;3,&gt;=2.4.0-&gt;notebook&gt;=4.4.1-&gt;widgetsnbextension~=3.6.6-&gt;ipywidgets-&gt;netpanda) (8.6.0)\nRequirement already satisfied: jupyter-core!=5.0.*,&gt;=4.12 in c:\\users\\shabiha\\anaconda3\\envs\\geo\\lib\\site-packages (from jupyter-server&lt;3,&gt;=2.4.0-&gt;notebook&gt;=4.4.1-&gt;widgetsnbextension~=3.6.6-&gt;ipywidgets-&gt;netpanda) (5.7.1)\nRequirement already satisfied: jupyter-events&gt;=0.9.0 in c:\\users\\shabiha\\anaconda3\\envs\\geo\\lib\\site-packages (from jupyter-server&lt;3,&gt;=2.4.0-&gt;notebook&gt;=4.4.1-&gt;widgetsnbextension~=3.6.6-&gt;ipywidgets-&gt;netpanda) (0.9.0)\nRequirement already satisfied: jupyter-server-terminals in c:\\users\\shabiha\\anaconda3\\envs\\geo\\lib\\site-packages (from jupyter-server&lt;3,&gt;=2.4.0-&gt;notebook&gt;=4.4.1-&gt;widgetsnbextension~=3.6.6-&gt;ipywidgets-&gt;netpanda) (0.5.2)\nRequirement already satisfied: nbconvert&gt;=6.4.4 in c:\\users\\shabiha\\anaconda3\\envs\\geo\\lib\\site-packages (from jupyter-server&lt;3,&gt;=2.4.0-&gt;notebook&gt;=4.4.1-&gt;widgetsnbextension~=3.6.6-&gt;ipywidgets-&gt;netpanda) (7.14.2)\nRequirement already satisfied: nbformat&gt;=5.3.0 in c:\\users\\shabiha\\anaconda3\\envs\\geo\\lib\\site-packages (from jupyter-server&lt;3,&gt;=2.4.0-&gt;notebook&gt;=4.4.1-&gt;widgetsnbextension~=3.6.6-&gt;ipywidgets-&gt;netpanda) (5.9.2)\nRequirement already satisfied: overrides in c:\\users\\shabiha\\anaconda3\\envs\\geo\\lib\\site-packages (from jupyter-server&lt;3,&gt;=2.4.0-&gt;notebook&gt;=4.4.1-&gt;widgetsnbextension~=3.6.6-&gt;ipywidgets-&gt;netpanda) (7.6.0)\nRequirement already satisfied: prometheus-client in c:\\users\\shabiha\\anaconda3\\envs\\geo\\lib\\site-packages (from jupyter-server&lt;3,&gt;=2.4.0-&gt;notebook&gt;=4.4.1-&gt;widgetsnbextension~=3.6.6-&gt;ipywidgets-&gt;netpanda) (0.19.0)\nRequirement already satisfied: pywinpty in c:\\users\\shabiha\\anaconda3\\envs\\geo\\lib\\site-packages (from jupyter-server&lt;3,&gt;=2.4.0-&gt;notebook&gt;=4.4.1-&gt;widgetsnbextension~=3.6.6-&gt;ipywidgets-&gt;netpanda) (2.0.12)\nRequirement already satisfied: pyzmq&gt;=24 in c:\\users\\shabiha\\anaconda3\\envs\\geo\\lib\\site-packages (from jupyter-server&lt;3,&gt;=2.4.0-&gt;notebook&gt;=4.4.1-&gt;widgetsnbextension~=3.6.6-&gt;ipywidgets-&gt;netpanda) (25.1.2)\nRequirement already satisfied: send2trash&gt;=1.8.2 in c:\\users\\shabiha\\anaconda3\\envs\\geo\\lib\\site-packages (from jupyter-server&lt;3,&gt;=2.4.0-&gt;notebook&gt;=4.4.1-&gt;widgetsnbextension~=3.6.6-&gt;ipywidgets-&gt;netpanda) (1.8.2)\nRequirement already satisfied: terminado&gt;=0.8.3 in c:\\users\\shabiha\\anaconda3\\envs\\geo\\lib\\site-packages (from jupyter-server&lt;3,&gt;=2.4.0-&gt;notebook&gt;=4.4.1-&gt;widgetsnbextension~=3.6.6-&gt;ipywidgets-&gt;netpanda) (0.18.0)\nRequirement already satisfied: websocket-client in c:\\users\\shabiha\\anaconda3\\envs\\geo\\lib\\site-packages (from jupyter-server&lt;3,&gt;=2.4.0-&gt;notebook&gt;=4.4.1-&gt;widgetsnbextension~=3.6.6-&gt;ipywidgets-&gt;netpanda) (1.7.0)\nRequirement already satisfied: async-lru&gt;=1.0.0 in c:\\users\\shabiha\\anaconda3\\envs\\geo\\lib\\site-packages (from jupyterlab&lt;5,&gt;=4.0.2-&gt;notebook&gt;=4.4.1-&gt;widgetsnbextension~=3.6.6-&gt;ipywidgets-&gt;netpanda) (2.0.4)\nRequirement already satisfied: ipykernel in c:\\users\\shabiha\\anaconda3\\envs\\geo\\lib\\site-packages (from jupyterlab&lt;5,&gt;=4.0.2-&gt;notebook&gt;=4.4.1-&gt;widgetsnbextension~=3.6.6-&gt;ipywidgets-&gt;netpanda) (6.29.0)\nRequirement already satisfied: jupyter-lsp&gt;=2.0.0 in c:\\users\\shabiha\\anaconda3\\envs\\geo\\lib\\site-packages (from jupyterlab&lt;5,&gt;=4.0.2-&gt;notebook&gt;=4.4.1-&gt;widgetsnbextension~=3.6.6-&gt;ipywidgets-&gt;netpanda) (2.2.2)\nRequirement already satisfied: babel&gt;=2.10 in c:\\users\\shabiha\\anaconda3\\envs\\geo\\lib\\site-packages (from jupyterlab-server&lt;3,&gt;=2.22.1-&gt;notebook&gt;=4.4.1-&gt;widgetsnbextension~=3.6.6-&gt;ipywidgets-&gt;netpanda) (2.14.0)\nRequirement already satisfied: json5&gt;=0.9.0 in c:\\users\\shabiha\\anaconda3\\envs\\geo\\lib\\site-packages (from jupyterlab-server&lt;3,&gt;=2.22.1-&gt;notebook&gt;=4.4.1-&gt;widgetsnbextension~=3.6.6-&gt;ipywidgets-&gt;netpanda) (0.9.14)\nRequirement already satisfied: affine in c:\\users\\shabiha\\anaconda3\\envs\\geo\\lib\\site-packages (from rasterio&gt;=1.3-&gt;large-image-source-rasterio&gt;=1.27.1-&gt;large-image[rasterio]&gt;=1.22.2-&gt;localtileserver-&gt;netpanda) (2.4.0)\nRequirement already satisfied: snuggs&gt;=1.4.1 in c:\\users\\shabiha\\anaconda3\\envs\\geo\\lib\\site-packages (from rasterio&gt;=1.3-&gt;large-image-source-rasterio&gt;=1.27.1-&gt;large-image[rasterio]&gt;=1.22.2-&gt;localtileserver-&gt;netpanda) (1.4.7)\nRequirement already satisfied: sniffio&gt;=1.1 in c:\\users\\shabiha\\anaconda3\\envs\\geo\\lib\\site-packages (from anyio&gt;=3.1.0-&gt;jupyter-server&lt;3,&gt;=2.4.0-&gt;notebook&gt;=4.4.1-&gt;widgetsnbextension~=3.6.6-&gt;ipywidgets-&gt;netpanda) (1.3.0)\nRequirement already satisfied: platformdirs&gt;=2.5 in c:\\users\\shabiha\\anaconda3\\envs\\geo\\lib\\site-packages (from jupyter-core!=5.0.*,&gt;=4.12-&gt;jupyter-server&lt;3,&gt;=2.4.0-&gt;notebook&gt;=4.4.1-&gt;widgetsnbextension~=3.6.6-&gt;ipywidgets-&gt;netpanda) (4.1.0)\nRequirement already satisfied: pywin32&gt;=300 in c:\\users\\shabiha\\anaconda3\\envs\\geo\\lib\\site-packages (from jupyter-core!=5.0.*,&gt;=4.12-&gt;jupyter-server&lt;3,&gt;=2.4.0-&gt;notebook&gt;=4.4.1-&gt;widgetsnbextension~=3.6.6-&gt;ipywidgets-&gt;netpanda) (306)\nRequirement already satisfied: python-json-logger&gt;=2.0.4 in c:\\users\\shabiha\\anaconda3\\envs\\geo\\lib\\site-packages (from jupyter-events&gt;=0.9.0-&gt;jupyter-server&lt;3,&gt;=2.4.0-&gt;notebook&gt;=4.4.1-&gt;widgetsnbextension~=3.6.6-&gt;ipywidgets-&gt;netpanda) (2.0.7)\nRequirement already satisfied: rfc3339-validator in c:\\users\\shabiha\\anaconda3\\envs\\geo\\lib\\site-packages (from jupyter-events&gt;=0.9.0-&gt;jupyter-server&lt;3,&gt;=2.4.0-&gt;notebook&gt;=4.4.1-&gt;widgetsnbextension~=3.6.6-&gt;ipywidgets-&gt;netpanda) (0.1.4)\nRequirement already satisfied: rfc3986-validator&gt;=0.1.1 in c:\\users\\shabiha\\anaconda3\\envs\\geo\\lib\\site-packages (from jupyter-events&gt;=0.9.0-&gt;jupyter-server&lt;3,&gt;=2.4.0-&gt;notebook&gt;=4.4.1-&gt;widgetsnbextension~=3.6.6-&gt;ipywidgets-&gt;netpanda) (0.1.1)\nRequirement already satisfied: beautifulsoup4 in c:\\users\\shabiha\\anaconda3\\envs\\geo\\lib\\site-packages (from nbconvert&gt;=6.4.4-&gt;jupyter-server&lt;3,&gt;=2.4.0-&gt;notebook&gt;=4.4.1-&gt;widgetsnbextension~=3.6.6-&gt;ipywidgets-&gt;netpanda) (4.12.3)\nRequirement already satisfied: defusedxml in c:\\users\\shabiha\\anaconda3\\envs\\geo\\lib\\site-packages (from nbconvert&gt;=6.4.4-&gt;jupyter-server&lt;3,&gt;=2.4.0-&gt;notebook&gt;=4.4.1-&gt;widgetsnbextension~=3.6.6-&gt;ipywidgets-&gt;netpanda) (0.7.1)\nRequirement already satisfied: jupyterlab-pygments in c:\\users\\shabiha\\anaconda3\\envs\\geo\\lib\\site-packages (from nbconvert&gt;=6.4.4-&gt;jupyter-server&lt;3,&gt;=2.4.0-&gt;notebook&gt;=4.4.1-&gt;widgetsnbextension~=3.6.6-&gt;ipywidgets-&gt;netpanda) (0.3.0)\nRequirement already satisfied: mistune&lt;4,&gt;=2.0.3 in c:\\users\\shabiha\\anaconda3\\envs\\geo\\lib\\site-packages (from nbconvert&gt;=6.4.4-&gt;jupyter-server&lt;3,&gt;=2.4.0-&gt;notebook&gt;=4.4.1-&gt;widgetsnbextension~=3.6.6-&gt;ipywidgets-&gt;netpanda) (3.0.2)\nRequirement already satisfied: nbclient&gt;=0.5.0 in c:\\users\\shabiha\\anaconda3\\envs\\geo\\lib\\site-packages (from nbconvert&gt;=6.4.4-&gt;jupyter-server&lt;3,&gt;=2.4.0-&gt;notebook&gt;=4.4.1-&gt;widgetsnbextension~=3.6.6-&gt;ipywidgets-&gt;netpanda) (0.9.0)\nRequirement already satisfied: pandocfilters&gt;=1.4.1 in c:\\users\\shabiha\\anaconda3\\envs\\geo\\lib\\site-packages (from nbconvert&gt;=6.4.4-&gt;jupyter-server&lt;3,&gt;=2.4.0-&gt;notebook&gt;=4.4.1-&gt;widgetsnbextension~=3.6.6-&gt;ipywidgets-&gt;netpanda) (1.5.1)\nRequirement already satisfied: tinycss2 in c:\\users\\shabiha\\anaconda3\\envs\\geo\\lib\\site-packages (from nbconvert&gt;=6.4.4-&gt;jupyter-server&lt;3,&gt;=2.4.0-&gt;notebook&gt;=4.4.1-&gt;widgetsnbextension~=3.6.6-&gt;ipywidgets-&gt;netpanda) (1.2.1)\nRequirement already satisfied: fastjsonschema in c:\\users\\shabiha\\anaconda3\\envs\\geo\\lib\\site-packages (from nbformat&gt;=5.3.0-&gt;jupyter-server&lt;3,&gt;=2.4.0-&gt;notebook&gt;=4.4.1-&gt;widgetsnbextension~=3.6.6-&gt;ipywidgets-&gt;netpanda) (2.19.1)\nRequirement already satisfied: pyparsing&gt;=2.1.6 in c:\\users\\shabiha\\anaconda3\\envs\\geo\\lib\\site-packages (from snuggs&gt;=1.4.1-&gt;rasterio&gt;=1.3-&gt;large-image-source-rasterio&gt;=1.27.1-&gt;large-image[rasterio]&gt;=1.22.2-&gt;localtileserver-&gt;netpanda) (3.1.1)\nRequirement already satisfied: argon2-cffi-bindings in c:\\users\\shabiha\\anaconda3\\envs\\geo\\lib\\site-packages (from argon2-cffi-&gt;jupyter-server&lt;3,&gt;=2.4.0-&gt;notebook&gt;=4.4.1-&gt;widgetsnbextension~=3.6.6-&gt;ipywidgets-&gt;netpanda) (21.2.0)\nRequirement already satisfied: debugpy&gt;=1.6.5 in c:\\users\\shabiha\\anaconda3\\envs\\geo\\lib\\site-packages (from ipykernel-&gt;jupyterlab&lt;5,&gt;=4.0.2-&gt;notebook&gt;=4.4.1-&gt;widgetsnbextension~=3.6.6-&gt;ipywidgets-&gt;netpanda) (1.8.0)\nRequirement already satisfied: nest-asyncio in c:\\users\\shabiha\\anaconda3\\envs\\geo\\lib\\site-packages (from ipykernel-&gt;jupyterlab&lt;5,&gt;=4.0.2-&gt;notebook&gt;=4.4.1-&gt;widgetsnbextension~=3.6.6-&gt;ipywidgets-&gt;netpanda) (1.6.0)\nRequirement already satisfied: psutil in c:\\users\\shabiha\\anaconda3\\envs\\geo\\lib\\site-packages (from ipykernel-&gt;jupyterlab&lt;5,&gt;=4.0.2-&gt;notebook&gt;=4.4.1-&gt;widgetsnbextension~=3.6.6-&gt;ipywidgets-&gt;netpanda) (5.9.8)\nRequirement already satisfied: fqdn in c:\\users\\shabiha\\anaconda3\\envs\\geo\\lib\\site-packages (from jsonschema[format-nongpl]&gt;=4.18.0-&gt;jupyter-events&gt;=0.9.0-&gt;jupyter-server&lt;3,&gt;=2.4.0-&gt;notebook&gt;=4.4.1-&gt;widgetsnbextension~=3.6.6-&gt;ipywidgets-&gt;netpanda) (1.5.1)\nRequirement already satisfied: isoduration in c:\\users\\shabiha\\anaconda3\\envs\\geo\\lib\\site-packages (from jsonschema[format-nongpl]&gt;=4.18.0-&gt;jupyter-events&gt;=0.9.0-&gt;jupyter-server&lt;3,&gt;=2.4.0-&gt;notebook&gt;=4.4.1-&gt;widgetsnbextension~=3.6.6-&gt;ipywidgets-&gt;netpanda) (20.11.0)\nRequirement already satisfied: jsonpointer&gt;1.13 in c:\\users\\shabiha\\anaconda3\\envs\\geo\\lib\\site-packages (from jsonschema[format-nongpl]&gt;=4.18.0-&gt;jupyter-events&gt;=0.9.0-&gt;jupyter-server&lt;3,&gt;=2.4.0-&gt;notebook&gt;=4.4.1-&gt;widgetsnbextension~=3.6.6-&gt;ipywidgets-&gt;netpanda) (2.4)\nRequirement already satisfied: uri-template in c:\\users\\shabiha\\anaconda3\\envs\\geo\\lib\\site-packages (from jsonschema[format-nongpl]&gt;=4.18.0-&gt;jupyter-events&gt;=0.9.0-&gt;jupyter-server&lt;3,&gt;=2.4.0-&gt;notebook&gt;=4.4.1-&gt;widgetsnbextension~=3.6.6-&gt;ipywidgets-&gt;netpanda) (1.3.0)\nRequirement already satisfied: webcolors&gt;=1.11 in c:\\users\\shabiha\\anaconda3\\envs\\geo\\lib\\site-packages (from jsonschema[format-nongpl]&gt;=4.18.0-&gt;jupyter-events&gt;=0.9.0-&gt;jupyter-server&lt;3,&gt;=2.4.0-&gt;notebook&gt;=4.4.1-&gt;widgetsnbextension~=3.6.6-&gt;ipywidgets-&gt;netpanda) (1.13)\nRequirement already satisfied: cffi&gt;=1.0.1 in c:\\users\\shabiha\\anaconda3\\envs\\geo\\lib\\site-packages (from argon2-cffi-bindings-&gt;argon2-cffi-&gt;jupyter-server&lt;3,&gt;=2.4.0-&gt;notebook&gt;=4.4.1-&gt;widgetsnbextension~=3.6.6-&gt;ipywidgets-&gt;netpanda) (1.16.0)\nRequirement already satisfied: soupsieve&gt;1.2 in c:\\users\\shabiha\\anaconda3\\envs\\geo\\lib\\site-packages (from beautifulsoup4-&gt;nbconvert&gt;=6.4.4-&gt;jupyter-server&lt;3,&gt;=2.4.0-&gt;notebook&gt;=4.4.1-&gt;widgetsnbextension~=3.6.6-&gt;ipywidgets-&gt;netpanda) (2.5)\nRequirement already satisfied: pycparser in c:\\users\\shabiha\\anaconda3\\envs\\geo\\lib\\site-packages (from cffi&gt;=1.0.1-&gt;argon2-cffi-bindings-&gt;argon2-cffi-&gt;jupyter-server&lt;3,&gt;=2.4.0-&gt;notebook&gt;=4.4.1-&gt;widgetsnbextension~=3.6.6-&gt;ipywidgets-&gt;netpanda) (2.21)\nRequirement already satisfied: arrow&gt;=0.15.0 in c:\\users\\shabiha\\anaconda3\\envs\\geo\\lib\\site-packages (from isoduration-&gt;jsonschema[format-nongpl]&gt;=4.18.0-&gt;jupyter-events&gt;=0.9.0-&gt;jupyter-server&lt;3,&gt;=2.4.0-&gt;notebook&gt;=4.4.1-&gt;widgetsnbextension~=3.6.6-&gt;ipywidgets-&gt;netpanda) (1.3.0)\nRequirement already satisfied: types-python-dateutil&gt;=2.8.10 in c:\\users\\shabiha\\anaconda3\\envs\\geo\\lib\\site-packages (from arrow&gt;=0.15.0-&gt;isoduration-&gt;jsonschema[format-nongpl]&gt;=4.18.0-&gt;jupyter-events&gt;=0.9.0-&gt;jupyter-server&lt;3,&gt;=2.4.0-&gt;notebook&gt;=4.4.1-&gt;widgetsnbextension~=3.6.6-&gt;ipywidgets-&gt;netpanda) (2.8.19.20240106)\nNote: you may need to restart the kernel to use updated packages.\n</pre> In\u00a0[6]: Copied! <pre>import netpanda\n</pre> import netpanda In\u00a0[7]: Copied! <pre>m = netpanda.Map()\n\n# Add GeoJSON layer\nm.add_geojson(\"C:/Users/Shabiha/netpanda/docs/countries.geojson\")\n\n# Add shapefile\nm.add_shp(\"C:/Users/Shabiha/netpanda/docs/countries/countries.shp\")\n\n# Add vector\nm.add_vector(\"C:/Users/Shabiha/netpanda/docs/countries.geojson\")\nm\n</pre> m = netpanda.Map()  # Add GeoJSON layer m.add_geojson(\"C:/Users/Shabiha/netpanda/docs/countries.geojson\")  # Add shapefile m.add_shp(\"C:/Users/Shabiha/netpanda/docs/countries/countries.shp\")  # Add vector m.add_vector(\"C:/Users/Shabiha/netpanda/docs/countries.geojson\") m  <pre>Map(center=[20, 0], controls=(ZoomControl(options=['position', 'zoom_in_text', 'zoom_in_title', 'zoom_out_text\u2026</pre>"},{"location":"examples/Vector/#make-sure-you-download-all-the-necessary-countriesgeojson-file-and-countriesshp-files-from-the-docsexample-folder","title":"Make sure you download all the necessary countries.geojson file and countries.shp files from the docs/example folder!\u00b6","text":""},{"location":"examples/Widgets/","title":"Widgets","text":"In\u00a0[1]: Copied! <pre>import netpanda\n</pre> import netpanda In\u00a0[2]: Copied! <pre>from ipyleaflet import Map, WidgetControl, basemaps\nimport ipywidgets as widgets\n</pre> from ipyleaflet import Map, WidgetControl, basemaps import ipywidgets as widgets In\u00a0[3]: Copied! <pre>from netpanda import Map\n</pre> from netpanda import Map  In\u00a0[4]: Copied! <pre>m = netpanda.Map()\nm\n</pre> m = netpanda.Map() m <pre>Map(center=[20, 0], controls=(ZoomControl(options=['position', 'zoom_in_text', 'zoom_in_title', 'zoom_out_text\u2026</pre> In\u00a0[5]: Copied! <pre>m.add_basemap_gui()\nm\n</pre> m.add_basemap_gui() m <pre>Map(bottom=654.0, center=[20, 0], controls=(ZoomControl(options=['position', 'zoom_in_text', 'zoom_in_title', \u2026</pre> <pre>Trying to add new basemap: OpenTopoMap\nNew basemap added: OpenTopoMap\nTrying to add new basemap: Esri.WorldImagery\nNo basemap found with name: Esri.WorldImagery\n</pre> In\u00a0[6]: Copied! <pre>m.add_zoom_slider()\n</pre> m.add_zoom_slider() In\u00a0[7]: Copied! <pre>output_widget = widgets.Output(layout={\"border\": \"2px solid blue\"})\noutput_control = WidgetControl(widget=output_widget, position=\"bottomleft\")\nm.add_control(output_control)\nwith output_widget:\n    print(\"Dead!\")\n</pre> output_widget = widgets.Output(layout={\"border\": \"2px solid blue\"}) output_control = WidgetControl(widget=output_widget, position=\"bottomleft\") m.add_control(output_control) with output_widget:     print(\"Dead!\")"},{"location":"examples/example_code/","title":"Example code","text":"In\u00a0[1]: Copied! <pre>%pip install netpanda\n</pre> %pip install netpanda <pre>Collecting netpanda\n  Downloading netpanda-0.0.1-py2.py3-none-any.whl.metadata (1.3 kB)\nRequirement already satisfied: numpy in c:\\users\\shabiha\\anaconda3\\envs\\geo\\lib\\site-packages (from netpanda) (1.23.4)\nDownloading netpanda-0.0.1-py2.py3-none-any.whl (2.6 kB)\nInstalling collected packages: netpanda\nSuccessfully installed netpanda-0.0.1\nNote: you may need to restart the kernel to use updated packages.\n</pre> In\u00a0[2]: Copied! <pre>import netpanda\n</pre> import netpanda In\u00a0[3]: Copied! <pre>from netpanda.common import hello_world\n</pre> from netpanda.common import hello_world In\u00a0[4]: Copied! <pre>hello_world()\n</pre> hello_world() <pre>Hello World!\n</pre> In\u00a0[4]: Copied! <pre>import random\n</pre> import random In\u00a0[12]: Copied! <pre>random.randint(2,10)\n</pre> random.randint(2,10) Out[12]: <pre>2</pre>"},{"location":"examples/intro/","title":"Intro","text":"In\u00a0[\u00a0]: Copied! <pre>print('Hello World!')\n</pre> print('Hello World!')"},{"location":"examples/lab4/","title":"Lab4","text":"In\u00a0[1]: Copied! <pre>from datetime import datetime\n\nnow = datetime.now()\nprint(f\"Submitted time: {now}\")\n</pre> from datetime import datetime  now = datetime.now() print(f\"Submitted time: {now}\") <pre>Submitted time: 2024-03-07 21:23:51.001050\n</pre> In\u00a0[2]: Copied! <pre>person_name = \"Bekub\"\nprint(f\"Hello {person_name}, you have no future.\")\n</pre> person_name = \"Bekub\" print(f\"Hello {person_name}, you have no future.\") <pre>Hello Bekub, you have no future.\n</pre> In\u00a0[3]: Copied! <pre>person_name = \"Codliver Shakib\"\nprint(f\"Lowercase: {person_name.lower()}\")\nprint(f\"Uppercase: {person_name.upper()}\")\nprint(f\"Title Case: {person_name.title()}\")\n</pre> person_name = \"Codliver Shakib\" print(f\"Lowercase: {person_name.lower()}\") print(f\"Uppercase: {person_name.upper()}\") print(f\"Title Case: {person_name.title()}\") <pre>Lowercase: codliver shakib\nUppercase: CODLIVER SHAKIB\nTitle Case: Codliver Shakib\n</pre> In\u00a0[4]: Copied! <pre>Professor_Snape = \"After all these time? Always\"\nprint(f\"Professor Snape replied to Professor Dumbledor question as, \\\"{Professor_Snape}\\\"\")\n</pre> Professor_Snape = \"After all these time? Always\" print(f\"Professor Snape replied to Professor Dumbledor question as, \\\"{Professor_Snape}\\\"\") <pre>Professor Snape replied to Professor Dumbledor question as, \"After all these time? Always\"\n</pre> In\u00a0[5]: Copied! <pre>person_name =\" Shabiha \\t Hossain \\nMajor:\\tGeography \\t \"\nprint(f\"Original Name: '{person_name}'\")\nprint(f\"lstrip(): '{person_name.lstrip()}'\")\nprint(f\"rstrip(): '{person_name.rstrip()}'\")\nprint(f\"strip(): '{person_name.strip()}'\")\n</pre> person_name =\" Shabiha \\t Hossain \\nMajor:\\tGeography \\t \" print(f\"Original Name: '{person_name}'\") print(f\"lstrip(): '{person_name.lstrip()}'\") print(f\"rstrip(): '{person_name.rstrip()}'\") print(f\"strip(): '{person_name.strip()}'\")  <pre>Original Name: ' Shabiha \t Hossain \nMajor:\tGeography \t '\nlstrip(): 'Shabiha \t Hossain \nMajor:\tGeography \t '\nrstrip(): ' Shabiha \t Hossain \nMajor:\tGeography'\nstrip(): 'Shabiha \t Hossain \nMajor:\tGeography'\n</pre> In\u00a0[6]: Copied! <pre>Names = ['Maisha','Tanbi', 'Sraboni']\nprint(Names[0])\nprint(Names[1])\nprint(Names[2])\n</pre> Names = ['Maisha','Tanbi', 'Sraboni'] print(Names[0]) print(Names[1]) print(Names[2]) <pre>Maisha\nTanbi\nSraboni\n</pre> In\u00a0[7]: Copied! <pre>Vehicles=['car', 'bike', 'train', 'bicycle']\nprint('I would like to travel by', Vehicles[2])\nprint('But one day I wish to buy a Tesla', Vehicles[0])\n</pre> Vehicles=['car', 'bike', 'train', 'bicycle'] print('I would like to travel by', Vehicles[2]) print('But one day I wish to buy a Tesla', Vehicles[0]) <pre>I would like to travel by train\nBut one day I wish to buy a Tesla car\n</pre> In\u00a0[8]: Copied! <pre>pizza=['pepperoni', 'mushroom', 'chicken alfredo', 'deep dish']\nfor i in pizza:\n  print(i)\n</pre> pizza=['pepperoni', 'mushroom', 'chicken alfredo', 'deep dish'] for i in pizza:   print(i) <pre>pepperoni\nmushroom\nchicken alfredo\ndeep dish\n</pre> In\u00a0[9]: Copied! <pre>verb=['hate', 'kinda like','love','absolutely love']\nfor verb, pizza in zip(verb,pizza):\n  print(\"I\", verb, pizza, \"pizza\")\n</pre> verb=['hate', 'kinda like','love','absolutely love'] for verb, pizza in zip(verb,pizza):   print(\"I\", verb, pizza, \"pizza\") <pre>I hate pepperoni pizza\nI kinda like mushroom pizza\nI love chicken alfredo pizza\nI absolutely love deep dish pizza\n</pre> <p>Add a line at the end of your program, outside the for loop, that states how much you like pizza. The output should consist of three or more lines about the kinds of pizza you like and then an additional sentence, such as I really love pizza!</p> In\u00a0[10]: Copied! <pre>pizza=['pepperoni', 'mushroom', 'chicken alfredo', 'deep dish']\nverb=['hate', 'kinda like','love','absolutely love']\nMessage='I can never get bored of eating pizza. My kind of adrenaline.'\n</pre> pizza=['pepperoni', 'mushroom', 'chicken alfredo', 'deep dish'] verb=['hate', 'kinda like','love','absolutely love'] Message='I can never get bored of eating pizza. My kind of adrenaline.' In\u00a0[11]: Copied! <pre>for verb, pizza in zip(verb,pizza):\n    print(\"I\", verb, pizza, \"pizza\")\nprint(Message)\n</pre> for verb, pizza in zip(verb,pizza):     print(\"I\", verb, pizza, \"pizza\") print(Message) <pre>I hate pepperoni pizza\nI kinda like mushroom pizza\nI love chicken alfredo pizza\nI absolutely love deep dish pizza\nI can never get bored of eating pizza. My kind of adrenaline.\n</pre> In\u00a0[12]: Copied! <pre>animals=['dog', 'cat', 'bird', 'rabbit']\nfor i in animals:print(i)\n</pre> animals=['dog', 'cat', 'bird', 'rabbit'] for i in animals:print(i) <pre>dog\ncat\nbird\nrabbit\n</pre> In\u00a0[13]: Copied! <pre>Line=['fluffy','cute','sweet','adorable']\nfor Line, animals in zip(Line,animals):\n    print(animals,\"is\", Line)\n</pre> Line=['fluffy','cute','sweet','adorable'] for Line, animals in zip(Line,animals):     print(animals,\"is\", Line) <pre>dog is fluffy\ncat is cute\nbird is sweet\nrabbit is adorable\n</pre> <p>Add a line at the end of your program stating what these animals have in common. You could print a sentence such as Any of these animals would make a great pet!</p> In\u00a0[14]: Copied! <pre>animals=['dog', 'cat', 'bird', 'rabbit']\nLine=['fluffy','cute','sweet','adorable']\nfor Line, animals in zip(Line,animals):\n    print(animals,\"is\", Line,\"and they are all designed to obey humans.\")\n</pre> animals=['dog', 'cat', 'bird', 'rabbit'] Line=['fluffy','cute','sweet','adorable'] for Line, animals in zip(Line,animals):     print(animals,\"is\", Line,\"and they are all designed to obey humans.\") <pre>dog is fluffy and they are all designed to obey humans.\ncat is cute and they are all designed to obey humans.\nbird is sweet and they are all designed to obey humans.\nrabbit is adorable and they are all designed to obey humans.\n</pre> In\u00a0[15]: Copied! <pre>Num=list(range(1,101))\n</pre> Num=list(range(1,101)) In\u00a0[16]: Copied! <pre>print(min(Num), max(Num))\n</pre> print(min(Num), max(Num)) <pre>1 100\n</pre> In\u00a0[17]: Copied! <pre>print(sum(Num))\n</pre> print(sum(Num)) <pre>5050\n</pre> In\u00a0[18]: Copied! <pre>start = 1\nend = 20\n\nif start % 2 != 0:\n\n    for num in range(start, end + 1, 2):\n        print(num, end=\" \")\nelse:\n\n    for num in range(start+1, end + 1, 2):\n        print(num, end=\" \")\n</pre> start = 1 end = 20  if start % 2 != 0:      for num in range(start, end + 1, 2):         print(num, end=\" \") else:      for num in range(start+1, end + 1, 2):         print(num, end=\" \") <pre>1 3 5 7 9 11 13 15 17 19 </pre> In\u00a0[19]: Copied! <pre>Threes = [i for i in range(3, 30) if i % 3 == 0]\nprint(Threes)\n</pre> Threes = [i for i in range(3, 30) if i % 3 == 0] print(Threes) <pre>[3, 6, 9, 12, 15, 18, 21, 24, 27]\n</pre> In\u00a0[20]: Copied! <pre>Z = [number**3 for number in range(1,11)]\n\nfor T in Z:\n    print(T)\n</pre> Z = [number**3 for number in range(1,11)]  for T in Z:     print(T) <pre>1\n8\n27\n64\n125\n216\n343\n512\n729\n1000\n</pre> In\u00a0[21]: Copied! <pre>pizza=['pepperoni', 'mushroom', 'chicken alfredo', 'deep dish', 'sausage', 'seafood', 'shrimp']\n</pre> pizza=['pepperoni', 'mushroom', 'chicken alfredo', 'deep dish', 'sausage', 'seafood', 'shrimp'] In\u00a0[22]: Copied! <pre>print('The first three items in the list are:', (pizza[:3]))\n</pre> print('The first three items in the list are:', (pizza[:3])) <pre>The first three items in the list are: ['pepperoni', 'mushroom', 'chicken alfredo']\n</pre> <p>Print the message Three items from the middle of the list are:. Use a slice to print three items from the middle of the list.</p> In\u00a0[23]: Copied! <pre>middle_start = len(pizza) // 2 - 1 \nmiddle_end = middle_start + 3 \nprint('The three items from the middle in the list are:', (pizza[middle_start:middle_end]))\n</pre> middle_start = len(pizza) // 2 - 1  middle_end = middle_start + 3  print('The three items from the middle in the list are:', (pizza[middle_start:middle_end]))  <pre>The three items from the middle in the list are: ['chicken alfredo', 'deep dish', 'sausage']\n</pre> <p>Print the message The last three items in the list are:. Use a slice to print the last three items in the list.</p> In\u00a0[24]: Copied! <pre>print('The last three items in the list are:', (pizza[-3:]))\n</pre> print('The last three items in the list are:', (pizza[-3:])) <pre>The last three items in the list are: ['sausage', 'seafood', 'shrimp']\n</pre> In\u00a0[25]: Copied! <pre>Our_foods = (\n    'pasta', 'chowmein', 'curry','mousse', 'lemonade',\n    )\n\nprint(\"Our menu offers:\")\nfor food in Our_foods:\n    print(f\"- {food}\")\n</pre> Our_foods = (     'pasta', 'chowmein', 'curry','mousse', 'lemonade',     )  print(\"Our menu offers:\") for food in Our_foods:     print(f\"- {food}\") <pre>Our menu offers:\n- pasta\n- chowmein\n- curry\n- mousse\n- lemonade\n</pre> <p>The restaurant changes its menu, replacing two of the items with different foods. Add a line that rewrites the tuple, and then use a for loop to print each of the items on the revised menu.</p> In\u00a0[26]: Copied! <pre>Revised_foods = (\n    'vegetables', 'chowmein', 'chicken curry','mousse', 'lemonade',\n    )\n\nprint(\"Little change in our menu has been authorized.\")\nprint(\"\\nOur revised menu offers now:\")\nfor food in Revised_foods:\n    print(f\"- {food}\")\n</pre> Revised_foods = (     'vegetables', 'chowmein', 'chicken curry','mousse', 'lemonade',     )  print(\"Little change in our menu has been authorized.\") print(\"\\nOur revised menu offers now:\") for food in Revised_foods:     print(f\"- {food}\") <pre>Little change in our menu has been authorized.\n\nOur revised menu offers now:\n- vegetables\n- chowmein\n- chicken curry\n- mousse\n- lemonade\n</pre> In\u00a0[27]: Copied! <pre>alien_color = 'green'\n\nif alien_color == 'green':\n    print(\"You just earned 5 points!\")\n</pre> alien_color = 'green'  if alien_color == 'green':     print(\"You just earned 5 points!\") <pre>You just earned 5 points!\n</pre> In\u00a0[28]: Copied! <pre>alien_color = 'red'\n\nif alien_color == 'green':\n    print(\"You just earned 5 points!\")\n</pre> alien_color = 'red'  if alien_color == 'green':     print(\"You just earned 5 points!\") In\u00a0[29]: Copied! <pre>age = 21\n\nif age &lt; 2:\n    print(\"You're a baby\")\nelif age &lt; 4:\n    print(\"You're a toddler\")\nelif age &lt; 13:\n    print(\"You're a kid\")\nelif age &lt; 20:\n    print(\"You're a teenager\")\nelif age &lt; 65:\n    print(\"You're an adult\")\nelse:\n    print(\"You're an elder\")\n</pre> age = 21  if age &lt; 2:     print(\"You're a baby\") elif age &lt; 4:     print(\"You're a toddler\") elif age &lt; 13:     print(\"You're a kid\") elif age &lt; 20:     print(\"You're a teenager\") elif age &lt; 65:     print(\"You're an adult\") else:     print(\"You're an elder\") <pre>You're an adult\n</pre> In\u00a0[30]: Copied! <pre>favorite_fruits = ['mangoes', 'bananas', 'oranges']\n\nif 'bananas' in favorite_fruits:\n    print(\"You really like bananas!\")\nif 'apples' in favorite_fruits:\n    print(\"You really like apples!\")\nelse:\n    print(\"apples are not your fav!\")\nif 'oranges' in favorite_fruits:\n    print(\"You really like oranges!\")\nif 'blueberries' in favorite_fruits:\n    print(\"You really like blueberries!\")\nelse: \n    print(\"blueberries are not your fav!\")\nif 'mangoes' in favorite_fruits:\n    print(\"You really like mangoes!\")\n</pre> favorite_fruits = ['mangoes', 'bananas', 'oranges']  if 'bananas' in favorite_fruits:     print(\"You really like bananas!\") if 'apples' in favorite_fruits:     print(\"You really like apples!\") else:     print(\"apples are not your fav!\") if 'oranges' in favorite_fruits:     print(\"You really like oranges!\") if 'blueberries' in favorite_fruits:     print(\"You really like blueberries!\") else:      print(\"blueberries are not your fav!\") if 'mangoes' in favorite_fruits:     print(\"You really like mangoes!\") <pre>You really like bananas!\napples are not your fav!\nYou really like oranges!\nblueberries are not your fav!\nYou really like mangoes!\n</pre> In\u00a0[31]: Copied! <pre>username =['admin', 'meem', 'nazifa', 'max','lucas']\nfor name in username:\n  if name =='admin':\n    print('Hello admin, would you like to see a status report?')\n  else:\n    print(f\"Hello {name}, thank you for logging in again!\")\n</pre> username =['admin', 'meem', 'nazifa', 'max','lucas'] for name in username:   if name =='admin':     print('Hello admin, would you like to see a status report?')   else:     print(f\"Hello {name}, thank you for logging in again!\") <pre>Hello admin, would you like to see a status report?\nHello meem, thank you for logging in again!\nHello nazifa, thank you for logging in again!\nHello max, thank you for logging in again!\nHello lucas, thank you for logging in again!\n</pre> In\u00a0[32]: Copied! <pre>current_users =['admin', 'meem', 'nazifa', 'max','lucas']\nnew_users=['matt', 'Nazifa', 'Jeff', 'ken', 'MAX']\n</pre> current_users =['admin', 'meem', 'nazifa', 'max','lucas'] new_users=['matt', 'Nazifa', 'Jeff', 'ken', 'MAX'] In\u00a0[33]: Copied! <pre>current_users_lower = [user.lower() for user in current_users]\n\nfor new_user in new_users:\n    if new_user.lower() in current_users_lower:\n        print(f\"Sorry {new_user}, the name is taken.\")\n    else:\n        print(f\"Great, {new_user} is available.\")\n</pre> current_users_lower = [user.lower() for user in current_users]  for new_user in new_users:     if new_user.lower() in current_users_lower:         print(f\"Sorry {new_user}, the name is taken.\")     else:         print(f\"Great, {new_user} is available.\") <pre>Great, matt is available.\nSorry Nazifa, the name is taken.\nGreat, Jeff is available.\nGreat, ken is available.\nSorry MAX, the name is taken.\n</pre> In\u00a0[34]: Copied! <pre>numbers = list(range(1,10))\n\nfor number in numbers:\n    if number == 1:\n        print(\"1st\")\n    elif number == 2:\n        print(\"2nd\")\n    elif number == 3:\n        print(\"3rd\")\n    else:\n        print(f\"{number}th\")\n</pre> numbers = list(range(1,10))  for number in numbers:     if number == 1:         print(\"1st\")     elif number == 2:         print(\"2nd\")     elif number == 3:         print(\"3rd\")     else:         print(f\"{number}th\") <pre>1st\n2nd\n3rd\n4th\n5th\n6th\n7th\n8th\n9th\n</pre>"},{"location":"examples/lab4/#lab-4","title":"Lab-4\u00b6","text":""},{"location":"examples/lab4/#question-1","title":"Question 1\u00b6","text":"<p>Personal Message: Use a variable to represent a person\u2019s name, and print a message to that person. Your message should be simple, such as, \u201cHello Eric, would you like to learn some Python today?\u201d</p>"},{"location":"examples/lab4/#question-2","title":"Question 2\u00b6","text":"<p>Name Cases: Use a variable to represent a person\u2019s name, and then print that person\u2019s name in lowercase, uppercase, and title case.</p>"},{"location":"examples/lab4/#question-3","title":"Question 3\u00b6","text":"<p>Famous Quote: Find a quote from a famous person you admire. Print the quote and the name of its author. Your output should look something like the following, including the quotation marks:</p> <pre><code>Albert Einstein once said, \u201cA person who never made a mistake never tried anything new.\u201d\n</code></pre>"},{"location":"examples/lab4/#question-4","title":"Question 4\u00b6","text":"<p>Stripping Names: Use a variable to represent a person\u2019s name, and include some whitespace characters at the beginning and end of the name. Make sure you use each character combination, \"\\t\" and \"\\n\", at least once. Print the name once, so the whitespace around the name is displayed. Then print the name using each of the three stripping functions, lstrip(), rstrip(), and strip().</p>"},{"location":"examples/lab4/#question-5","title":"Question 5\u00b6","text":"<p>Names: Store the names of a few of your friends in a list called names. Print each person\u2019s name by accessing each element in the list, one at a time.</p>"},{"location":"examples/lab4/#question-6","title":"Question 6\u00b6","text":"<p>Your Own List: Think of your favorite mode of transportation, such as a motorcycle or a car, and make a list that stores several examples. Use your list to print a series of statements about these items, such as \u201cI would like to own a Honda motorcycle.\u201d</p>"},{"location":"examples/lab4/#question-7","title":"Question 7\u00b6","text":"<p>Pizzas: Think of at least three kinds of your favorite pizza. Store these pizza names in a list, and then use a for loop to print the name of each pizza.</p> <p>Modify your for loop to print a sentence using the name of the pizza instead of printing just the name of the pizza. For each pizza you should have one line of output containing a simple statement like I like pepperoni pizza.</p>"},{"location":"examples/lab4/#question-8","title":"Question 8\u00b6","text":"<p>Animals: Think of at least three different animals that have a common characteristic. Store the names of these animals in a list, and then use a for loop to print out the name of each animal.</p> <p>Modify your program to print a statement about each animal, such as A dog would make a great pet.</p>"},{"location":"examples/lab4/#question-9","title":"Question 9\u00b6","text":"<p>Summing a Hundred: Make a list of the numbers from one to one hundred, and then use <code>min()</code> and <code>max()</code> to make sure your list actually starts at one and ends at one hundred. Also, use the sum() function to see how quickly Python can add a hundred numbers.</p>"},{"location":"examples/lab4/#question-10","title":"Question 10\u00b6","text":"<p>Odd Numbers: Use the third argument of the <code>range()</code> function to make a list of the odd numbers from 1 to 20. Use a <code>for</code> loop to print each number.</p>"},{"location":"examples/lab4/#question-11","title":"Question 11\u00b6","text":"<p>Threes: Make a list of the multiples of 3 from 3 to 30. Use a <code>for</code> loop to print the numbers in your list.</p>"},{"location":"examples/lab4/#question-12","title":"Question 12\u00b6","text":"<p>Cube Comprehension: Use a list comprehension to generate a list of the first 10 cubes.</p>"},{"location":"examples/lab4/#question-13","title":"Question 13\u00b6","text":"<p>Slices: Using one of the programs you wrote in this lab, add several lines to the end of the program that do the following:</p> <p>Print the message The first three items in the list are:. Then use a slice to print the first three items from that program\u2019s list.</p>"},{"location":"examples/lab4/#question-14","title":"Question 14\u00b6","text":"<p>Buffet: A buffet-style restaurant offers only five basic foods. Think of five simple foods, and store them in a tuple.</p> <p>Use a for loop to print each food the restaurant offers.</p>"},{"location":"examples/lab4/#question-15","title":"Question 15\u00b6","text":"<p>Alien Colors: Imagine an alien was just shot down in a game. Create a variable called <code>alien_color</code> and assign it a value of <code>green, yellow,</code> or <code>red</code>.</p> <ul> <li>Write an if statement to test whether the alien\u2019s color is green. If it is, print a message that the player just earned 5 points.</li> <li>Write one version of this program that passes the if test and another that fails. (The version that fails will have no output.)</li> </ul>"},{"location":"examples/lab4/#question-16","title":"Question 16\u00b6","text":"<p>Stages of Life: Write an <code>if-elif-else</code> chain that determines a person\u2019s stage of life. Set a value for the variable <code>age</code>, and then:</p> <ul> <li>If the person is less than 2 years old, print a message that the person is a baby.</li> <li>If the person is at least 2 years old but less than 4, print a message that the person is a toddler.</li> <li>If the person is at least 4 years old but less than 13, print a message that the person is a kid.</li> <li>If the person is at least 13 years old but less than 20, print a message that the person is a teenager.</li> <li>If the person is at least 20 years old but less than 65, print a message that the person is an adult.</li> </ul>"},{"location":"examples/lab4/#question-17","title":"Question 17\u00b6","text":"<p>Favorite Fruit: Make a list of your favorite fruits, and then write a series of independent <code>if</code> statements that check for certain fruits in your list.</p> <ul> <li>Make a list of your three favorite fruits and call it favorite_fruits.</li> <li>Write five if statements. Each should check whether a certain kind of fruit is in your list. If the fruit is in your list, the if block should print a statement, such as You really like bananas!</li> </ul>"},{"location":"examples/lab4/#question-18","title":"Question 18\u00b6","text":"<p>Hello Admin: Make a list of five or more usernames, including the name <code>admin</code>. Imagine you are writing code that will print a greeting to each user after they log in to a website. Loop through the list, and print a greeting to each user:</p> <ul> <li>If the username is 'admin', print a special greeting, such as Hello admin, would you like to see a status report?</li> <li>Otherwise, print a generic greeting, such as Hello Jaden, thank you for logging in again.</li> </ul>"},{"location":"examples/lab4/#question-19","title":"Question 19\u00b6","text":"<p>Checking Usernames: Do the following to create a program that simulates how websites ensure that everyone has a unique username.</p> <ul> <li>Make a list of five or more usernames called <code>current_users</code>.</li> <li>Make another list of five usernames called <code>new_users</code>. Make sure one or two of the new usernames are also in the <code>current_users</code> list.</li> <li>Loop through the <code>new_users</code> list to see if each new username has already been used. If it has, print a message that the person will need to enter a new username. If a username has not been used, print a message saying that the username is available.</li> <li>Make sure your comparison is case insensitive. If 'John' has been used, 'JOHN' should not be accepted. (To do this, you\u2019ll need to make a copy of <code>current_users</code> containing the lowercase versions of all existing users.)</li> </ul>"},{"location":"examples/lab4/#question-20","title":"Question 20\u00b6","text":"<p>Ordinal Numbers: Ordinal numbers indicate their position in a list, such as 1st or 2nd. Most ordinal numbers end in th, except 1, 2, and 3.</p> <ul> <li>Store the numbers 1 through 9 in a list.</li> <li>Loop through the list.</li> <li>Use an <code>if-elif-else</code> chain inside the loop to print the proper ordinal ending for each number. Your output should read \"1st 2nd 3rd 4th 5th 6th 7th 8th 9th\", and each result should be on a separate line.</li> </ul>"},{"location":"examples/lab5/","title":"Lab5","text":"In\u00a0[1]: Copied! <pre>person_info = {\n    'first_name': 'Shabiha',\n    'last_name': 'Hossain',\n    'age': 86,\n    'city': 'Dhaka'\n}\n\nprint(\"First Name:\", person_info['first_name'])\nprint(\"Last Name:\", person_info['last_name'])\nprint(\"Age:\", person_info['age'])\nprint(\"City:\", person_info['city'])\n</pre> person_info = {     'first_name': 'Shabiha',     'last_name': 'Hossain',     'age': 86,     'city': 'Dhaka' }  print(\"First Name:\", person_info['first_name']) print(\"Last Name:\", person_info['last_name']) print(\"Age:\", person_info['age']) print(\"City:\", person_info['city']) <pre>First Name: Shabiha\nLast Name: Hossain\nAge: 86\nCity: Dhaka\n</pre> In\u00a0[2]: Copied! <pre>favorite_numbers = {\n    'Shabiha': 99,\n    'Sraboni': 105,\n    'Prerona': 11,\n    'Nawar': 39,\n    'Tanbi': 24\n}\n\nfor person, number in favorite_numbers.items():\n    print(f\"{person}'s favorite number is: {number}\")\n</pre> favorite_numbers = {     'Shabiha': 99,     'Sraboni': 105,     'Prerona': 11,     'Nawar': 39,     'Tanbi': 24 }  for person, number in favorite_numbers.items():     print(f\"{person}'s favorite number is: {number}\") <pre>Shabiha's favorite number is: 99\nSraboni's favorite number is: 105\nPrerona's favorite number is: 11\nNawar's favorite number is: 39\nTanbi's favorite number is: 24\n</pre> In\u00a0[3]: Copied! <pre>programming_glossary = {\n    'Variable': 'A named storage location in a program that holds a value.',\n    'Function': 'A reusable block of code that performs a specific task.',\n    'Loop': 'A programming structure that repeats a set of instructions until a certain condition is met.',\n    'List': 'An ordered collection of items that can be modified.',\n    'Dictionary': 'A collection of key-value pairs, where each key must be unique.'\n}\n\nfor term, meaning in programming_glossary.items():\n    print(f\"{term}:\\n{meaning}\\n\")\n</pre> programming_glossary = {     'Variable': 'A named storage location in a program that holds a value.',     'Function': 'A reusable block of code that performs a specific task.',     'Loop': 'A programming structure that repeats a set of instructions until a certain condition is met.',     'List': 'An ordered collection of items that can be modified.',     'Dictionary': 'A collection of key-value pairs, where each key must be unique.' }  for term, meaning in programming_glossary.items():     print(f\"{term}:\\n{meaning}\\n\") <pre>Variable:\nA named storage location in a program that holds a value.\n\nFunction:\nA reusable block of code that performs a specific task.\n\nLoop:\nA programming structure that repeats a set of instructions until a certain condition is met.\n\nList:\nAn ordered collection of items that can be modified.\n\nDictionary:\nA collection of key-value pairs, where each key must be unique.\n\n</pre> In\u00a0[4]: Copied! <pre>programming_glossary['Module'] = 'A file containing Python definitions and statements.'\nprogramming_glossary['Exception'] = 'An event that occurs during the execution of a program and disrupts the normal flow of instructions.'\nprogramming_glossary['Tuple'] = 'An immutable ordered collection of elements.'\nprogramming_glossary['Boolean'] = 'A data type that has one of two possible values: True or False.'\nprogramming_glossary['Method'] = 'A function that is associated with an object and can be called on that object.'\n\nprint(\"\\nUpdated Glossary:\")\nfor term, meaning in programming_glossary.items():\n    print(f\"{term}:\\n{meaning}\\n\")\n</pre> programming_glossary['Module'] = 'A file containing Python definitions and statements.' programming_glossary['Exception'] = 'An event that occurs during the execution of a program and disrupts the normal flow of instructions.' programming_glossary['Tuple'] = 'An immutable ordered collection of elements.' programming_glossary['Boolean'] = 'A data type that has one of two possible values: True or False.' programming_glossary['Method'] = 'A function that is associated with an object and can be called on that object.'  print(\"\\nUpdated Glossary:\") for term, meaning in programming_glossary.items():     print(f\"{term}:\\n{meaning}\\n\") <pre>\nUpdated Glossary:\nVariable:\nA named storage location in a program that holds a value.\n\nFunction:\nA reusable block of code that performs a specific task.\n\nLoop:\nA programming structure that repeats a set of instructions until a certain condition is met.\n\nList:\nAn ordered collection of items that can be modified.\n\nDictionary:\nA collection of key-value pairs, where each key must be unique.\n\nModule:\nA file containing Python definitions and statements.\n\nException:\nAn event that occurs during the execution of a program and disrupts the normal flow of instructions.\n\nTuple:\nAn immutable ordered collection of elements.\n\nBoolean:\nA data type that has one of two possible values: True or False.\n\nMethod:\nA function that is associated with an object and can be called on that object.\n\n</pre> In\u00a0[5]: Copied! <pre>major_rivers = {\n    'Nile': 'Egypt',\n    'Brahmaputra': 'Bangladesh',\n    'Amur': 'Russia'\n}\n\nfor river, country in major_rivers.items():\n    print(f\"The {river} runs through {country}.\")\n\nprint(\"\\nNames of the rivers:\")\nfor river in major_rivers.keys():\n    print(river)\n\nprint(\"\\nNames of the countries:\")\nfor country in major_rivers.values():\n    print(country)\n</pre> major_rivers = {     'Nile': 'Egypt',     'Brahmaputra': 'Bangladesh',     'Amur': 'Russia' }  for river, country in major_rivers.items():     print(f\"The {river} runs through {country}.\")  print(\"\\nNames of the rivers:\") for river in major_rivers.keys():     print(river)  print(\"\\nNames of the countries:\") for country in major_rivers.values():     print(country)  <pre>The Nile runs through Egypt.\nThe Brahmaputra runs through Bangladesh.\nThe Amur runs through Russia.\n\nNames of the rivers:\nNile\nBrahmaputra\nAmur\n\nNames of the countries:\nEgypt\nBangladesh\nRussia\n</pre> In\u00a0[6]: Copied! <pre>cities = {\n    'Dhaka': {\n        'country': 'Bangladesh',\n        'population': 10352000,\n        'fact': 'Dhaka is famous for many street foods.'\n    },\n    'Chittagong': {\n        'country': 'Bangladesh',\n        'population': 397000,\n        'fact': 'Chittagong is known for Patenga and Coxs Bazar Sea Beach.'\n    },\n    'Khulna': {\n        'country': 'Bangladesh',\n        'population': 156000,\n        'fact': 'Khulna has its World Heritage Site, Sundarban.'\n    }\n}\n\nfor city, city_info in cities.items():\n    print(f\"\\nCity: {city}\")\n    print(f\"Country: {city_info['country']}\")\n    print(f\"Population: {city_info['population']}\")\n    print(f\"Fact: {city_info['fact']}\")\n</pre> cities = {     'Dhaka': {         'country': 'Bangladesh',         'population': 10352000,         'fact': 'Dhaka is famous for many street foods.'     },     'Chittagong': {         'country': 'Bangladesh',         'population': 397000,         'fact': 'Chittagong is known for Patenga and Coxs Bazar Sea Beach.'     },     'Khulna': {         'country': 'Bangladesh',         'population': 156000,         'fact': 'Khulna has its World Heritage Site, Sundarban.'     } }  for city, city_info in cities.items():     print(f\"\\nCity: {city}\")     print(f\"Country: {city_info['country']}\")     print(f\"Population: {city_info['population']}\")     print(f\"Fact: {city_info['fact']}\")  <pre>\nCity: Dhaka\nCountry: Bangladesh\nPopulation: 10352000\nFact: Dhaka is famous for many street foods.\n\nCity: Chittagong\nCountry: Bangladesh\nPopulation: 397000\nFact: Chittagong is known for Patenga and Coxs Bazar Sea Beach.\n\nCity: Khulna\nCountry: Bangladesh\nPopulation: 156000\nFact: Khulna has its World Heritage Site, Sundarban.\n</pre> In\u00a0[7]: Copied! <pre>user_input = input(\"What kind of rental car would you like? \")\nprint(f\"Let me see if I can find you a {user_input}.\")\n</pre> user_input = input(\"What kind of rental car would you like? \") print(f\"Let me see if I can find you a {user_input}.\") <pre>Let me see if I can find you a Honda Civic.\n</pre> In\u00a0[8]: Copied! <pre>num_people = int(input(\"How many people are in your dinner group? \"))\nif num_people &gt; 8:\n    print(\"I'm sorry, you'll have to wait for a table.\")\nelse:\n    print(\"Your table is ready. Enjoy your meal!\")\n</pre> num_people = int(input(\"How many people are in your dinner group? \")) if num_people &gt; 8:     print(\"I'm sorry, you'll have to wait for a table.\") else:     print(\"Your table is ready. Enjoy your meal!\") <pre>I'm sorry, you'll have to wait for a table.\n</pre> In\u00a0[9]: Copied! <pre>user_number = int(input(\"Enter a number: \"))\nif user_number % 10 == 0:\n    print(f\"{user_number} is a multiple of 10.\")\nelse:\n    print(f\"{user_number} is not a multiple of 10.\")\n</pre> user_number = int(input(\"Enter a number: \")) if user_number % 10 == 0:     print(f\"{user_number} is a multiple of 10.\") else:     print(f\"{user_number} is not a multiple of 10.\") <pre>8 is not a multiple of 10.\n</pre> In\u00a0[10]: Copied! <pre>pizza_toppings = []\nwhile True:\n    topping = input(\"Enter a pizza topping (type 'quit' to finish): \")\n\n    if topping.lower() == 'quit':\n        break\n\n    pizza_toppings.append(topping)\n    print(f\"Adding {topping} to your pizza.\")\n\nif pizza_toppings:\n    print(\"\\nYour pizza will have the following toppings:\")\n    for topping in pizza_toppings:\n        print(\"- \" + topping)\nelse:\n    print(\"You didn't choose any toppings for your pizza.\")\n</pre> pizza_toppings = [] while True:     topping = input(\"Enter a pizza topping (type 'quit' to finish): \")      if topping.lower() == 'quit':         break      pizza_toppings.append(topping)     print(f\"Adding {topping} to your pizza.\")  if pizza_toppings:     print(\"\\nYour pizza will have the following toppings:\")     for topping in pizza_toppings:         print(\"- \" + topping) else:     print(\"You didn't choose any toppings for your pizza.\") <pre>Adding sausage to your pizza.\nAdding mushroom to your pizza.\nAdding chicken to your pizza.\nAdding olive to your pizza.\nAdding cheese to your pizza.\n\nYour pizza will have the following toppings:\n- sausage\n- mushroom\n- chicken\n- olive\n- cheese\n</pre> In\u00a0[11]: Copied! <pre>def display_message():\n    print(\"In this chapter, I am learning how to define function, call dictionaries, and python basics.\")\ndisplay_message()\n</pre> def display_message():     print(\"In this chapter, I am learning how to define function, call dictionaries, and python basics.\") display_message() <pre>In this chapter, I am learning how to define function, call dictionaries, and python basics.\n</pre> In\u00a0[12]: Copied! <pre>def favorite_book(title):\n    print(f\"One of my favorite books is {title}.\")\nfavorite_book(\"The Da Vinci Code\")\n</pre> def favorite_book(title):     print(f\"One of my favorite books is {title}.\") favorite_book(\"The Da Vinci Code\") <pre>One of my favorite books is The Da Vinci Code.\n</pre> In\u00a0[13]: Copied! <pre>def make_shirt(size, message):\n    print(f\"Making a {size}-sized shirt with the message: '{message}'.\")\n\nmake_shirt(\"Medium\", \"I see you!\")\nmake_shirt(size=\"Large\", message=\"Bamboozled!\")\n</pre> def make_shirt(size, message):     print(f\"Making a {size}-sized shirt with the message: '{message}'.\")  make_shirt(\"Medium\", \"I see you!\") make_shirt(size=\"Large\", message=\"Bamboozled!\") <pre>Making a Medium-sized shirt with the message: 'I see you!'.\nMaking a Large-sized shirt with the message: 'Bamboozled!'.\n</pre> In\u00a0[14]: Copied! <pre>def make_shirt(size=\"Large\", message=\"I love Python\"):\n    print(f\"Making a {size}-sized shirt with the message: '{message}'.\")\nmake_shirt()\nmake_shirt(size=\"Medium\")\nmake_shirt(size=\"Small\", message=\"Code!gnorant\")\n</pre> def make_shirt(size=\"Large\", message=\"I love Python\"):     print(f\"Making a {size}-sized shirt with the message: '{message}'.\") make_shirt() make_shirt(size=\"Medium\") make_shirt(size=\"Small\", message=\"Code!gnorant\") <pre>Making a Large-sized shirt with the message: 'I love Python'.\nMaking a Medium-sized shirt with the message: 'I love Python'.\nMaking a Small-sized shirt with the message: 'Code!gnorant'.\n</pre> In\u00a0[15]: Copied! <pre>def describe_city(city, country=\"Bangladesh\"):\n    print(f\"{city} is in {country}.\")\n\ndescribe_city(\"Dhaka\", \"Bangladesh\")\ndescribe_city(\"Seoul\", \"South Korea\")\ndescribe_city(\"Chittagong\")\n</pre> def describe_city(city, country=\"Bangladesh\"):     print(f\"{city} is in {country}.\")  describe_city(\"Dhaka\", \"Bangladesh\") describe_city(\"Seoul\", \"South Korea\") describe_city(\"Chittagong\") <pre>Dhaka is in Bangladesh.\nSeoul is in South Korea.\nChittagong is in Bangladesh.\n</pre> In\u00a0[16]: Copied! <pre>def city_country(city, country):\n    return f\"{city}, {country}\"\n\nlocation1 = city_country(\"Tennessee\", \"USA\")\nlocation2 = city_country(\"Dhaka\", \"Bangladesh\")\nlocation3 = city_country(\"Mumbai\", \"India\")\nprint(location1)\nprint(location2)\nprint(location3)\n</pre> def city_country(city, country):     return f\"{city}, {country}\"  location1 = city_country(\"Tennessee\", \"USA\") location2 = city_country(\"Dhaka\", \"Bangladesh\") location3 = city_country(\"Mumbai\", \"India\") print(location1) print(location2) print(location3) <pre>Tennessee, USA\nDhaka, Bangladesh\nMumbai, India\n</pre> In\u00a0[17]: Copied! <pre>def make_album(artist, title, num_songs=None):\n    album = {'artist': artist, 'title': title}\n    if num_songs is not None:\n        album['num_songs'] = num_songs\n    return album\n\nalbum1 = make_album(\"Elvis Presley\", \"Blue Hawaii\", num_songs=14)\nalbum2 = make_album(\"Imagine Dragons\", \"Night Visions\")\nalbum3 = make_album(\"Michael Jackson\", \"Immortal\", num_songs=26)\n\nprint(album1)\nprint(album2)\nprint(album3)\n</pre> def make_album(artist, title, num_songs=None):     album = {'artist': artist, 'title': title}     if num_songs is not None:         album['num_songs'] = num_songs     return album  album1 = make_album(\"Elvis Presley\", \"Blue Hawaii\", num_songs=14) album2 = make_album(\"Imagine Dragons\", \"Night Visions\") album3 = make_album(\"Michael Jackson\", \"Immortal\", num_songs=26)  print(album1) print(album2) print(album3)  <pre>{'artist': 'Elvis Presley', 'title': 'Blue Hawaii', 'num_songs': 14}\n{'artist': 'Imagine Dragons', 'title': 'Night Visions'}\n{'artist': 'Michael Jackson', 'title': 'Immortal', 'num_songs': 26}\n</pre> In\u00a0[18]: Copied! <pre>def make_album(artist, title):\n    if artist and title:\n        album = {'artist': artist, 'title': title}\n        return album\n    else:\n        print(\"Invalid input. Both artist and title must be provided.\")\n\n\nwhile True:\n\n    artist_input = input(\"Enter the artist (type 'quit' to exit): \")\n    \n    if artist_input.lower() == 'quit':\n        break \n\n    title_input = input(\"Enter the album title: \")\n\n    if title_input.lower() == 'quit':\n        break  \n    album_dict = make_album(artist_input, title_input)\n\n    if album_dict:\n        print(album_dict)\n</pre> def make_album(artist, title):     if artist and title:         album = {'artist': artist, 'title': title}         return album     else:         print(\"Invalid input. Both artist and title must be provided.\")   while True:      artist_input = input(\"Enter the artist (type 'quit' to exit): \")          if artist_input.lower() == 'quit':         break       title_input = input(\"Enter the album title: \")      if title_input.lower() == 'quit':         break       album_dict = make_album(artist_input, title_input)      if album_dict:         print(album_dict) <pre>{'artist': 'Coldplay', 'title': 'Universe'}\n</pre> In\u00a0[19]: Copied! <pre>def show_messages(messages):\n    for message in messages:\n        print(message)\n\ntext_messages = [\n    \"Good Morning\",\n    \"How are you?\",\n    \"Do you have any plan tonight?\",\n    \"See you soon.\"\n]\n\nshow_messages(text_messages)\n</pre> def show_messages(messages):     for message in messages:         print(message)  text_messages = [     \"Good Morning\",     \"How are you?\",     \"Do you have any plan tonight?\",     \"See you soon.\" ]  show_messages(text_messages)  <pre>Good Morning\nHow are you?\nDo you have any plan tonight?\nSee you soon.\n</pre> In\u00a0[20]: Copied! <pre>def show_messages(messages):\n    for message in messages:\n        print(message)\n\ndef send_messages(messages, sent_messages):\n    while messages:\n        current_message = messages.pop(0)\n        print(f\"Sending message: {current_message}\")\n        sent_messages.append(current_message)\n\ntext_messages = [\n     \"Good Morning\",\n    \"How are you?\",\n    \"Do you have any plan tonight?\",\n    \"See you soon.\"\n]\n\nsent_messages = []\nsend_messages(text_messages, sent_messages)\n\nprint(\"Original Messages:\")\nshow_messages(text_messages)\n\nprint(\"\\nSent Messages:\")\nshow_messages(sent_messages)\n</pre> def show_messages(messages):     for message in messages:         print(message)  def send_messages(messages, sent_messages):     while messages:         current_message = messages.pop(0)         print(f\"Sending message: {current_message}\")         sent_messages.append(current_message)  text_messages = [      \"Good Morning\",     \"How are you?\",     \"Do you have any plan tonight?\",     \"See you soon.\" ]  sent_messages = [] send_messages(text_messages, sent_messages)  print(\"Original Messages:\") show_messages(text_messages)  print(\"\\nSent Messages:\") show_messages(sent_messages) <pre>Sending message: Good Morning\nSending message: How are you?\nSending message: Do you have any plan tonight?\nSending message: See you soon.\nOriginal Messages:\n\nSent Messages:\nGood Morning\nHow are you?\nDo you have any plan tonight?\nSee you soon.\n</pre> In\u00a0[36]: Copied! <pre>with open('Learning_python.txt', 'r') as file:\n    content = file.read()\n    print(\"Reading the entire file:\")\n    print(content)\n\nwith open('Learning_python.txt', 'r') as file:\n    print(\"\\nLooping over the file object:\")\n    for line in file:\n        print(line.strip()) \n\nwith open('Learning_python.txt', 'r') as file:\n    lines = file.readlines()\nprint(\"\\nWorking with lines outside the with block:\")\nfor line in lines:\n    print(line.strip())\n</pre> with open('Learning_python.txt', 'r') as file:     content = file.read()     print(\"Reading the entire file:\")     print(content)  with open('Learning_python.txt', 'r') as file:     print(\"\\nLooping over the file object:\")     for line in file:         print(line.strip())   with open('Learning_python.txt', 'r') as file:     lines = file.readlines() print(\"\\nWorking with lines outside the with block:\") for line in lines:     print(line.strip()) <pre>Reading the entire file:\nIn python you can learn how to make do coding effortlessly. \nIn python you can learn defining class and calling functions. \nIn python, you can also learn about variables. lists and statements.   \n\nLooping over the file object:\nIn python you can learn how to make do coding effortlessly.\nIn python you can learn defining class and calling functions.\nIn python, you can also learn about variables. lists and statements.\n\nWorking with lines outside the with block:\nIn python you can learn how to make do coding effortlessly.\nIn python you can learn defining class and calling functions.\nIn python, you can also learn about variables. lists and statements.\n</pre> In\u00a0[37]: Copied! <pre>with open('Learning_python.txt', 'r') as file:\n    lines = file.readlines()\n\nmodified_lines = []\nfor line in lines:\n    modified_line = line.replace('python', 'C++')\n    modified_lines.append(modified_line)\n\nprint(\"\\nModified lines (replacing 'python' with 'C++'):\")\nfor modified_line in modified_lines:\n    print(modified_line.strip())\n</pre> with open('Learning_python.txt', 'r') as file:     lines = file.readlines()  modified_lines = [] for line in lines:     modified_line = line.replace('python', 'C++')     modified_lines.append(modified_line)  print(\"\\nModified lines (replacing 'python' with 'C++'):\") for modified_line in modified_lines:     print(modified_line.strip()) <pre>\nModified lines (replacing 'python' with 'C++'):\nIn C++ you can learn how to make do coding effortlessly.\nIn C++ you can learn defining class and calling functions.\nIn C++, you can also learn about variables. lists and statements.\n</pre> In\u00a0[23]: Copied! <pre>user_name = input(\"Please enter your name: \")\n\nwith open('guest.txt', 'w') as file:\n    file.write(user_name)\n\nprint(f\"Thank you, {user_name}! Your name has been added to guest.txt.\")\n</pre> user_name = input(\"Please enter your name: \")  with open('guest.txt', 'w') as file:     file.write(user_name)  print(f\"Thank you, {user_name}! Your name has been added to guest.txt.\") <pre>Thank you, Nazifa! Your name has been added to guest.txt.\n</pre> In\u00a0[24]: Copied! <pre>filename = 'guest_book.txt'\n\nwhile True:\n    user_name = input(\"Please enter your name (type 'quit' to exit): \")\n\n    if user_name.lower() == 'quit':\n        break\n\n    print(f\"Welcome, {user_name}!\")\n\n    with open(filename, 'a') as file:\n        file.write(f\"{user_name}\\n\")\n\nprint(\"Thank you for visiting! Your entries have been recorded in guest_book.txt.\")\n</pre> filename = 'guest_book.txt'  while True:     user_name = input(\"Please enter your name (type 'quit' to exit): \")      if user_name.lower() == 'quit':         break      print(f\"Welcome, {user_name}!\")      with open(filename, 'a') as file:         file.write(f\"{user_name}\\n\")  print(\"Thank you for visiting! Your entries have been recorded in guest_book.txt.\") <pre>Welcome, Meem!\nWelcome, Shakib!\nWelcome, Shabiha!\nThank you for visiting! Your entries have been recorded in guest_book.txt.\n</pre> In\u00a0[25]: Copied! <pre>filename = 'user_response.txt'\n\nwhile True:\n    user_response = input(\"Why do you like programming? (type 'quit' to exit): \")\n\n    if user_response.lower() == 'quit':\n        break\n\n    with open(filename, 'a') as file:\n        file.write(f\"{user_response}\\n\")\n\nprint(\"Thank you for sharing your reasons! The responses have been recorded in user_response.txt.\")\n</pre> filename = 'user_response.txt'  while True:     user_response = input(\"Why do you like programming? (type 'quit' to exit): \")      if user_response.lower() == 'quit':         break      with open(filename, 'a') as file:         file.write(f\"{user_response}\\n\")  print(\"Thank you for sharing your reasons! The responses have been recorded in user_response.txt.\") <pre>Thank you for sharing your reasons! The responses have been recorded in user_response.txt.\n</pre> In\u00a0[26]: Copied! <pre>try:\n    num1 = float(input(\"Enter the first number: \"))\n    num2 = float(input(\"Enter the second number: \"))\n\n    result = num1 + num2\n    print(f\"The sum of {num1} and {num2} is: {result}\")\n\nexcept ValueError:\n    print(\"Error: Please enter valid numeric values.\")\n</pre> try:     num1 = float(input(\"Enter the first number: \"))     num2 = float(input(\"Enter the second number: \"))      result = num1 + num2     print(f\"The sum of {num1} and {num2} is: {result}\")  except ValueError:     print(\"Error: Please enter valid numeric values.\") <pre>The sum of 9.0 and 7.0 is: 16.0\n</pre> In\u00a0[27]: Copied! <pre>while True:\n    try:\n\n        user_input = input(\"Enter the first number (type 'quit' to exit): \")\n\n        if user_input.lower() == 'quit':\n            break\n\n        num1 = float(user_input)\n        num2 = float(input(\"Enter the second number: \"))\n        result = num1 + num2\n\n        print(f\"The sum of {num1} and {num2} is: {result}\")\n\n    except ValueError:\n        print(\"Error: Please enter valid numeric values.\")\n</pre> while True:     try:          user_input = input(\"Enter the first number (type 'quit' to exit): \")          if user_input.lower() == 'quit':             break          num1 = float(user_input)         num2 = float(input(\"Enter the second number: \"))         result = num1 + num2          print(f\"The sum of {num1} and {num2} is: {result}\")      except ValueError:         print(\"Error: Please enter valid numeric values.\") <pre>The sum of 2.0 and 67.0 is: 69.0\nError: Please enter valid numeric values.\nThe sum of 4.0 and 6.0 is: 10.0\n</pre> In\u00a0[28]: Copied! <pre>try:\n\n    with open('cats.txt', 'r') as cats_file:\n        cats_content = cats_file.read()\n        print(\"Contents of cats.txt:\")\n        print(cats_content)\n\nexcept FileNotFoundError as e:\n    print(f\"Error reading cats.txt: {e}\")\n\ntry:\n    with open('dogs.txt', 'r') as dogs_file:\n        dogs_content = dogs_file.read()\n        print(\"\\nContents of dogs.txt:\")\n        print(dogs_content)\n\nexcept FileNotFoundError as e:\n    print(f\"Error reading dogs.txt: {e}\")\n</pre> try:      with open('cats.txt', 'r') as cats_file:         cats_content = cats_file.read()         print(\"Contents of cats.txt:\")         print(cats_content)  except FileNotFoundError as e:     print(f\"Error reading cats.txt: {e}\")  try:     with open('dogs.txt', 'r') as dogs_file:         dogs_content = dogs_file.read()         print(\"\\nContents of dogs.txt:\")         print(dogs_content)  except FileNotFoundError as e:     print(f\"Error reading dogs.txt: {e}\") <pre>Error reading cats.txt: [Errno 2] No such file or directory: 'cats.txt'\n\nContents of dogs.txt:\nLuna\nPi\nHachiko   \n</pre> In\u00a0[29]: Copied! <pre>try:\n    \n    with open('cats.txt', 'r') as cats_file:\n        cats_content = cats_file.read()\n        print(\"Contents of cats.txt:\")\n        print(cats_content)\n\nexcept FileNotFoundError:\n    pass\n\ntry:\n    with open('dogs.txt', 'r') as dogs_file:\n        dogs_content = dogs_file.read()\n        print(\"\\nContents of dogs.txt:\")\n        print(dogs_content)\n\nexcept FileNotFoundError:\n    pass\n</pre> try:          with open('cats.txt', 'r') as cats_file:         cats_content = cats_file.read()         print(\"Contents of cats.txt:\")         print(cats_content)  except FileNotFoundError:     pass  try:     with open('dogs.txt', 'r') as dogs_file:         dogs_content = dogs_file.read()         print(\"\\nContents of dogs.txt:\")         print(dogs_content)  except FileNotFoundError:     pass <pre>\nContents of dogs.txt:\nLuna\nPi\nHachiko   \n</pre> In\u00a0[30]: Copied! <pre>line = \"Row, row, row your boat\"\nline.count(\"row\")\n</pre> line = \"Row, row, row your boat\" line.count(\"row\") Out[30]: <pre>2</pre> In\u00a0[31]: Copied! <pre>line.lower().count(\"row\")\n</pre> line.lower().count(\"row\") Out[31]: <pre>3</pre> <p>Notice that converting the string to lowercase using lower() catches all appearances of the word you\u2019re looking for, regardless of how it\u2019s formatted.</p> <p>Write a program that reads the files you found at Project Gutenberg and determines how many times the word <code>the</code> appears in each text. This will be an approximation because it will also count words such as <code>then</code> and <code>there</code>. Try counting <code>the</code>, with a space in the string, and see how much lower your count is.</p> In\u00a0[32]: Copied! <pre>def count_word_occurrences(file_path, word):\n    try:\n        with open(file_path, 'r', encoding='utf-8') as file:\n            content = file.read()\n            word_count = content.count(word)\n\n            word_count_case_insensitive = content.lower().count(word.lower())\n\n            print(f\"Occurrences of '{word}' (case-sensitive): {word_count}\")\n            print(f\"Occurrences of '{word}' (case-insensitive): {word_count_case_insensitive}\")\n\n    except FileNotFoundError:\n        print(f\"Error: File '{file_path}' not found.\")\n\ncount_word_occurrences(r'C:\\Users\\Shabiha\\arcgeo\\docs\\Labs\\copyfile.txt', 'the')\n</pre> def count_word_occurrences(file_path, word):     try:         with open(file_path, 'r', encoding='utf-8') as file:             content = file.read()             word_count = content.count(word)              word_count_case_insensitive = content.lower().count(word.lower())              print(f\"Occurrences of '{word}' (case-sensitive): {word_count}\")             print(f\"Occurrences of '{word}' (case-insensitive): {word_count_case_insensitive}\")      except FileNotFoundError:         print(f\"Error: File '{file_path}' not found.\")  count_word_occurrences(r'C:\\Users\\Shabiha\\arcgeo\\docs\\Labs\\copyfile.txt', 'the') <pre>Occurrences of 'the' (case-sensitive): 26\nOccurrences of 'the' (case-insensitive): 27\n</pre>"},{"location":"examples/lab5/#lab-5","title":"Lab 5\u00b6","text":""},{"location":"examples/lab5/#question-1","title":"Question 1\u00b6","text":"<p>Person: Use a dictionary to store information about a person you know. Store their first name, last name, age, and the city in which they live. You should have keys such as first_name, last_name, age, and city. Print each piece of information stored in your dictionary.</p>"},{"location":"examples/lab5/#question-2","title":"Question 2\u00b6","text":"<p>Favorite Numbers: Use a dictionary to store people\u2019s favorite numbers. Think of five names, and use them as keys in your dictionary. Think of a favorite number for each person, and store each as a value in your dictionary. Print each person\u2019s name and their favorite number. For even more fun, poll a few friends and get some actual data for your program.</p>"},{"location":"examples/lab5/#question-3","title":"Question 3\u00b6","text":"<p>Glossary: A Python dictionary can be used to model an actual dictionary. However, to avoid confusion, let\u2019s call it a glossary.</p> <ul> <li>Think of five programming words you\u2019ve learned about in the previous chapters. Use these words as the keys in your glossary, and store their meanings as values.</li> <li>Print each word and its meaning as neatly formatted output. You might print the word followed by a colon and then its meaning, or print the word on one line and then print its meaning indented on a second line. Use the newline character (\\n) to insert a blank line between each word-meaning pair in your output.</li> </ul>"},{"location":"examples/lab5/#question-4","title":"Question 4\u00b6","text":"<p>Glossary 2: Now that you know how to loop through a dictionary, clean up the code from Question 3 by replacing your series of print() calls with a loop that runs through the dictionary\u2019s keys and values. When you\u2019re sure that your loop works, add five more Python terms to your glossary. When you run your program again, these new words and meanings should automatically be included in the output.</p>"},{"location":"examples/lab5/#question-5","title":"Question 5\u00b6","text":"<p>Rivers: Make a dictionary containing three major rivers and the country each river runs through. One key-value pair might be 'nile': 'egypt'.</p> <ul> <li>Use a loop to print a sentence about each river, such as The Nile runs through Egypt.</li> <li>Use a loop to print the name of each river included in the dictionary.</li> <li>Use a loop to print the name of each country included in the dictionary.</li> </ul>"},{"location":"examples/lab5/#question-6","title":"Question 6\u00b6","text":"<p>Cities: Make a dictionary called <code>cities</code>. Use the names of three cities as keys in your dictionary. Create a dictionary of information about each city and include the country that the city is in, its approximate population, and one fact about that city. The keys for each city\u2019s dictionary should be something like <code>country</code>, <code>population</code>, and <code>fact</code>. Print the name of each city and all of the information you have stored about it.</p>"},{"location":"examples/lab5/#question-7","title":"Question 7\u00b6","text":"<p>Rental Car: Write a program that asks the user what kind of rental car they would like. Print a message about that car, such as \u201cLet me see if I can find you a Subaru.\u201d</p>"},{"location":"examples/lab5/#question-8","title":"Question 8\u00b6","text":"<p>Restaurant Seating: Write a program that asks the user how many people are in their dinner group. If the answer is more than eight, print a message saying they\u2019ll have to wait for a table. Otherwise, report that their table is ready.</p>"},{"location":"examples/lab5/#question-9","title":"Question 9\u00b6","text":"<p>Multiples of Ten: Ask the user for a number, and then report whether the number is a multiple of 10 or not.</p>"},{"location":"examples/lab5/#question-10","title":"Question 10\u00b6","text":"<p>Pizza Toppings: Write a loop that prompts the user to enter a series of pizza toppings until they enter a 'quit' value. As they enter each topping, print a message saying you\u2019ll add that topping to their pizza.</p>"},{"location":"examples/lab5/#question-11","title":"Question 11\u00b6","text":"<p>Message: Write a function called <code>display_message()</code> that prints one sentence telling everyone what you are learning about in this chapter. Call the function, and make sure the message displays correctly.</p>"},{"location":"examples/lab5/#question-12","title":"Question 12\u00b6","text":"<p>Favorite Book: Write a function called <code>favorite_book()</code> that accepts one parameter, title. The function should print a message, such as <code>One of my favorite books is Alice in Wonderland</code>. Call the function, making sure to include a book title as an argument in the function call.</p>"},{"location":"examples/lab5/#question-13","title":"Question 13\u00b6","text":"<p>T-Shirt: Write a function called <code>make_shirt()</code> that accepts a size and the text of a message that should be printed on the shirt. The function should print a sentence summarizing the size of the shirt and the message printed on it.</p> <p>Call the function once using positional arguments to make a shirt. Call the function a second time using keyword arguments.</p>"},{"location":"examples/lab5/#question-14","title":"Question 14\u00b6","text":"<p>Large Shirts: Modify the <code>make_shirt()</code> function so that shirts are large by default with a message that reads I love Python. Make a large shirt and a medium shirt with the default message, and a shirt of any size with a different message.</p>"},{"location":"examples/lab5/#question-15","title":"Question 15\u00b6","text":"<p>Cities: Write a function called <code>describe_city()</code> that accepts the name of a city and its country. The function should print a simple sentence, such as <code>Reykjavik is in Iceland</code>. Give the parameter for the country a default value. Call your function for three different cities, at least one of which is not in the default country.</p>"},{"location":"examples/lab5/#question-16","title":"Question 16\u00b6","text":"<p>City Names: Write a function called <code>city_country()</code> that takes in the name of a city and its country. The function should return a string formatted like this:</p> <pre>Santiago, Chile\n</pre> <p>Call your function with at least three city-country pairs, and print the values that are returned.</p>"},{"location":"examples/lab5/#question-17","title":"Question 17\u00b6","text":"<p>Album: Write a function called <code>make_album()</code> that builds a dictionary describing a music album. The function should take in an artist name and an album title, and it should return a dictionary containing these two pieces of information. Use the function to make three dictionaries representing different albums. Print each return value to show that the dictionaries are storing the album information correctly.</p> <p>Use None to add an optional parameter to make_album() that allows you to store the number of songs on an album. If the calling line includes a value for the number of songs, add that value to the album\u2019s dictionary. Make at least one new function call that includes the number of songs on an album.</p>"},{"location":"examples/lab5/#question-18","title":"Question 18\u00b6","text":"<p>User Albums: Start with your program from Question 17. Write a <code>while</code> loop that allows users to enter an album\u2019s artist and title. Once you have that information, call <code>make_album()</code> with the user\u2019s input and print the dictionary that\u2019s created. Be sure to include a quit value in the <code>while</code> loop.</p>"},{"location":"examples/lab5/#question-19","title":"Question 19\u00b6","text":"<p>Messages: Make a list containing a series of short text messages. Pass the list to a function called <code>show_messages()</code>, which prints each text message.</p>"},{"location":"examples/lab5/#question-20","title":"Question 20\u00b6","text":"<p>Sending Messages: Start with a copy of your program from Question 19. Write a function called <code>send_messages()</code> that prints each text message and moves each message to a new list called <code>sent_messages</code> as it\u2019s printed. After calling the function, print both of your lists to make sure the messages were moved correctly.</p>"},{"location":"examples/lab5/#question-21","title":"Question 21\u00b6","text":"<p>Learning Python: Open a blank file in your text editor and write a few lines summarizing what you\u2019ve learned about Python so far. Start each line with the phrase In Python you can. . .. Save the file as learning_python.txt in the same directory as your exercises from this chapter. Write a program that reads the file and prints what you wrote three times. Print the contents once by reading in the entire file, once by looping over the file object, and once by storing the lines in a list and then working with them outside the with block.</p>"},{"location":"examples/lab5/#question-22","title":"Question 22\u00b6","text":"<p>Learning C: You can use the replace() method to replace any word in a string with a different word. Here\u2019s a quick example showing how to replace 'dog' with 'cat' in a sentence:</p> <pre>message = \"I really like dogs.\"\nmessage.replace('dog', 'cat')\n'I really like cats.'\n</pre> <p>Read in each line from the file you just created, learning_python.txt, and replace the word Python with the name of another language, such as C. Print each modified line to the screen.</p>"},{"location":"examples/lab5/#question-23","title":"Question 23\u00b6","text":"<p>Guest: Write a program that prompts the user for their name. When they respond, write their name to a file called guest.txt.</p>"},{"location":"examples/lab5/#question-24","title":"Question 24\u00b6","text":"<p>Guest Book: Write a while loop that prompts users for their name. When they enter their name, print a greeting to the screen and add a line recording their visit in a file called guest_book.txt. Make sure each entry appears on a new line in the file.</p>"},{"location":"examples/lab5/#question-25","title":"Question 25\u00b6","text":"<p>Programming Poll: Write a while loop that asks people why they like programming. Each time someone enters a reason, add their reason to a file that stores all the responses.</p>"},{"location":"examples/lab5/#question-26","title":"Question 26\u00b6","text":"<p>Addition: One common problem when prompting for numerical input occurs when people provide text instead of numbers. When you try to convert the input to an int, you\u2019ll get a ValueError. Write a program that prompts for two numbers. Add them together and print the result. Catch the ValueError if either input value is not a number, and print a friendly error message. Test your program by entering two numbers and then by entering some text instead of a number.</p>"},{"location":"examples/lab5/#question-27","title":"Question 27\u00b6","text":"<p>Addition Calculator: Wrap your code from Question 26 in a while loop so the user can continue entering numbers even if they make a mistake and enter text instead of a number.</p>"},{"location":"examples/lab5/#question-28","title":"Question 28\u00b6","text":"<p>Cats and Dogs: Make two files, cats.txt and dogs.txt. Store at least three names of cats in the first file and three names of dogs in the second file. Write a program that tries to read these files and print the contents of the file to the screen. Wrap your code in a <code>try-except</code> block to catch the <code>FileNotFound</code> error, and print a friendly message if a file is missing. Move one of the files to a different location on your system, and make sure the code in the <code>except</code> block executes properly.</p>"},{"location":"examples/lab5/#question-29","title":"Question 29\u00b6","text":"<p>Silent Cats and Dogs: Modify your except block in Question 28 to fail silently if either file is missing.</p>"},{"location":"examples/lab5/#question-30","title":"Question 30\u00b6","text":"<p>Common Words: Visit Project Gutenberg (https://gutenberg.org/) and find a few texts you\u2019d like to analyze. Download the text files for these works, or copy the raw text from your browser into a text file on your computer. You can use the <code>count()</code> method to find out how many times a word or phrase appears in a string. For example, the following code counts the number of times 'row' appears in a string:</p>"}]}